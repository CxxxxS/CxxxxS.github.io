<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Shell脚本使用</title>
    <link href="/2022/02/12/Shell%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/02/12/Shell%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-Shell脚本使用"><a href="#Linux-Shell脚本使用" class="headerlink" title="Linux Shell脚本使用"></a>Linux Shell脚本使用</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​        shell是一个命令行解释器，接受用户与系统命令，调用操作系统内核。Linux系统提供了Shell解析器，键入以下命令来查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">cat /etc/shells<br></code></pre></td></tr></table></figure><p>​        Centos默认解析器为bash。在bin文件夹下执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ll | grep bash<br></code></pre></td></tr></table></figure><p>​        即可发现sh为bash软链接。Linux中的软链接，类似于windows系统的快捷键。譬如你将windows系统的D盘中某一个文件夹放在桌面上当做快捷键。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>​        第一个shell脚本，依次执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch helloworld.sh<br><br>vi helloworld.sh<br></code></pre></td></tr></table></figure><p>​        在文件里写入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>echo &quot;hello, shell&quot;<br></code></pre></td></tr></table></figure><p>​        退出编辑，键入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh helloworld.sh<br></code></pre></td></tr></table></figure><p>​        系统打印hello, shell。<br>​        要执行脚本，可以使用bash/sh加上文件的相对路径或绝对路径，使用系统的shell解释器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh helloworld.sh<br>bash helloworld.sh<br>sh /opt/shellpractice/helloworld.sh<br>bash /opt/shellpractice/helloworld.sh<br></code></pre></td></tr></table></figure><p>​        或者采用输入脚本的绝对路径或相对路径执行脚本，此时必须具有可执行权限+x。现在来执行脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./helloworld.sh<br></code></pre></td></tr></table></figure><p>提示权限不足，使用查看详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ll -l<br><br>-rw-r--r--. 1 root root 32 2月  11 21:56 helloworld.sh<br></code></pre></td></tr></table></figure><p>​        为脚本添加执行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod u+x helloworld.sh<br></code></pre></td></tr></table></figure><p>​        执行脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./helloworld.sh<br></code></pre></td></tr></table></figure><p>​        创建多命令脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch second.sh<br>vi second.sh<br></code></pre></td></tr></table></figure><p>​        编辑脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>cd /opt/data<br>touch test.txt<br>echo &quot;test.txt&quot; &gt;&gt;test.txt<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>​        Linux存在系统变量：$HOME、$PWD、$SHELL、$USER等，通过以下命令查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $USER<br></code></pre></td></tr></table></figure><p>​        <strong>自定变量操作</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">a=5 # 定义变量<br><br>echo $a # 输出变量<br><br>a=8 # 改变变量<br> <br>echo $a # 输出变量<br><br>unset a # 撤销变量<br><br>readonly a # 只读变量，unset 命令不能删除只读变量<br><br>export a # 使a变为全局变量，其余脚本也可使用<br></code></pre></td></tr></table></figure><p>​        在bash中，变量默认类型都是字符串类型，无法直接进行数值运算。<br>​        字符串可以使用单引号或者双引号，其中如果使用单引号无法使用转义字符和变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><br>my_name=&quot;tom&quot;<br>word1=&#x27;hello,$my_name&#x27;<br>word2=&#x27;hello,&#x27;$my_name&#x27;&#x27;<br>echo $word1 $word2<br><br>test_name=&quot;jerry&quot;<br>word3=&quot;hello,$test_name&quot;<br>word4=&quot;hello,&quot;$test_name&quot;&quot;<br>echo $word3 $word4<br></code></pre></td></tr></table></figure><p>​        <strong>几个特殊的变量</strong>：<br>​        $n：查询脚本的参数，$0为文件名。<br>​        $#：获取所有输入参数个数，常用于循环<br>​        $*：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体<br>​        $?：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；否则证明上一个命令执行不正确。<br>​        $@：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待</p><p>​        <strong>数组操作</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">my_array=(A B &quot;C&quot; D) # 在shell中定义数组<br><br>echo $&#123;array_name[index]&#125; # 读取数组值<br><br>echo $&#123;array_name[*]&#125; # 读取所有值<br>echo $&#123;array_name[@]&#125;<br><br>echo $&#123;#array_name[@]&#125; # 获取数组长度<br></code></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h3><p>​        原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。expr 是一款表达式计算工具，使用它能完成表达式的求值操作。创建sh文件，输入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><br>test=`expr 2 + 2`<br>echo &quot;2 + 2 = $test&quot;<br></code></pre></td></tr></table></figure><p>​        + ,  - ,  \*,   /,  %  为shell中的加，减，乘，除，取余；注意表达式和运算符之间要有空格，完整的表达式要被 <strong>` `</strong> 包含。<br>​        也可以通过表达式使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">s=$[(2+3)/5]<br>echo $s<br></code></pre></td></tr></table></figure><h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><p>​        关系运算符只支持数字，不支持字符串，除非字符串的值是数字。<br>​        <strong>-eq</strong>    检测两个数是否相等，相等返回 true。<br>​        <strong>-ne</strong>    检测两个数是否不相等，不相等返回 true。<br>​        <strong>-gt</strong>    检测左边的数是否大于右边的，如果是，则返回 true。<br>​        <strong>-lt</strong>    检测左边的数是否小于右边的，如果是，则返回 true。<br>​        <strong>-ge</strong>    检测左边的数是否大于等于右边的，如果是，则返回 true。<br>​        <strong>-le</strong>    检测左边的数是否小于等于右边的，如果是，则返回 true。</p><p>​        <strong>!</strong>    取反运算<br>​        <strong>-o</strong>    或运算<br>​        <strong>-a</strong>    与运算</p><p>​        <strong>&amp;&amp;</strong>    逻辑AND<br>​        <strong>||</strong>        逻辑OR</p><p>​        <strong>-r</strong>     有读的权限（read）<br>​        <strong>-w</strong>     有写的权限（write）<br>​        <strong>-x</strong>     有执行的权限（execute）</p><p>​        <strong>-f</strong>     文件存在并且是一个常规的文件（file）<br>​        <strong>-e</strong>     文件存在（existence）<br>​        <strong>-d</strong>     文件存在并是一个目录（directory）</p><p>​        <strong>使用示例1</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><br>a=1<br>b=2<br>if [ $a -gt $b ]<br>then <br>   echo &quot;$a 大于 $b&quot;<br>else<br>   echo &quot;$a 小于 $b&quot;<br>fi<br>if [ $a -lt 5 -a $b -gt 0 ]<br>then<br>   echo &quot;$a 小于 5 且 $b 大于 0 : 返回 true&quot;<br>else<br>   echo &quot;$a 小于 5 且 $b 大于 0 : 返回 false&quot;<br>fi<br>if [[ $a -lt 5 &amp;&amp; $b -gt 0 ]]<br>then<br>   echo &quot;返回 true&quot;<br>else<br>   echo &quot;返回 false&quot;<br>fi<br></code></pre></td></tr></table></figure><p>​        <strong>使用实例2</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[ 1 -gt 2]<br>echo $? # 1<br><br>[ -e fifth.sh]<br>echo $? # 0<br></code></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>​        格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ 条件判断式 ] <br><span class="hljs-keyword">then</span> <br>程序 <br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>​        <strong>示例</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><br>if [ $1 -eq &quot;1&quot; ]<br>then<br>   echo &quot;You input 1 just now!&quot;<br>else<br>   echo &quot;Your input is not 1!&quot;<br>fi<br></code></pre></td></tr></table></figure><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><p>​        格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">case</span> $变量名 <span class="hljs-keyword">in</span> <br><span class="hljs-string">&quot;值1&quot;</span>） <br>程序 <br>;; <br><span class="hljs-string">&quot;值2&quot;</span>） <br>程序 <br>;; <br>...<br>*)<br>程序<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><p>​        <strong>示例</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;输入 1 到 4 之间的数字:&#x27;<br>echo &#x27;你输入的数字为:&#x27;<br>read aNum<br>case $aNum in<br>    1)  echo &#x27;你选择了 1&#x27;<br>    ;;<br>    2)  echo &#x27;你选择了 2&#x27;<br>    ;;<br>    3)  echo &#x27;你选择了 3&#x27;<br>    ;;<br>    4)  echo &#x27;你选择了 4&#x27;<br>    ;;<br>    *)  echo &#x27;你没有输入 1 到 4 之间的数字&#x27;<br>    ;;<br>esac<br></code></pre></td></tr></table></figure><p>​        (read方法:<br>​        read(选项)(参数)  <strong>选项</strong>：-p：指定读取值时的提示符；-t：指定读取值时等待的时间（秒）<strong>参数</strong> 指定读取值的变量名)</p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>​        格式1：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">for <span class="hljs-comment">(( 初始值;循环控制条件;变量变化 )</span>) <br><span class="hljs-keyword">do</span> <br>程序<br><span class="hljs-keyword">do</span><span class="hljs-symbol">ne</span><br></code></pre></td></tr></table></figure><p>​        格式2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 值1 值2 值3… <br><span class="hljs-keyword">do</span> <br>程序 <br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>​        <strong>示例1</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><br>for i in $*<br>do<br>   printf &quot;参数：$i&quot;<br>done<br></code></pre></td></tr></table></figure><p>​        <strong>示例2</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>s=0<br>for((i=0;i&lt;=100;i++))<br>do<br>        s=$[$s+$i]<br>done<br>echo $s<br></code></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>​        格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> [ 条件判断式 ] <br><span class="hljs-keyword">do</span> <br>程序<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>​        <strong>示例</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><br>s=0<br>i=1<br>while [ $i -le 100 ]<br>do<br>    s=$[$s+$i]<br>    i=$[$i+1]<br>done<br><br>echo $s<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>​        格式：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fortran">[<span class="hljs-function"><span class="hljs-keyword">function</span></span>] funname [()]<br>&#123;<br><span class="hljs-keyword">action</span>;<br>[<span class="hljs-keyword">return</span>  <span class="hljs-built_in">int</span>;]<br>&#125;<br></code></pre></td></tr></table></figure><p>​        <strong>示例</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><br>function sum()<br>&#123;<br>    s=0<br>    s=$[ $1 + $2 ]<br>    echo &quot;$s&quot;<br>&#125;<br><br>read -p &quot;Please input the number1: &quot; n1;<br>read -p &quot;Please input the number2: &quot; n2;<br>sum $n1 $n2;<br></code></pre></td></tr></table></figure><p>​        在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><p>​        cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。</p><p>​        <strong>用法</strong>：<br>​        cut [选项参数]  filename<br>​        -f ：提取第几列  -d：分割符</p><p>​        <strong>示例</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cut -d &quot; &quot; -f 1 cut.txt # 剪切cut.txt，以空格分割，提取第一列<br></code></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>​        sort命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。</p><p>​        <strong>用法</strong>：<br>​        sort(选项)(参数)<br>​        -n    数值大小排序<br>​        -r     以相反的顺序排序<br>​        -t    设置排序分割字符<br>​        -k    需要排序的列</p><h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><p>​        sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”，接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非使用重定向存储输出。</p><p>​        <strong>用法</strong>：<br>​        sed [选项参数]  ‘command’  filename<br>​        其中，若command为a，意为新增，a的后面可以接字串，在下一行出现。若command为d，意为删除。若command为s，意为查找并替换。<br>​        更多sed用法，详见<a href="https://www.cnblogs.com/maxincai/p/5146338.html">博客</a>。</p><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>​        文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。</p><p>​        <strong>用法</strong>：<br>​        awk [选项参数]  ‘pattern1{action1} pattern2{action2}…’  filename<br>​        pattern：表示AWK在数据中查找的内容，就是匹配模式<br>​        action：在找到匹配内容时所执行的一系列命令<br>​        更多awk用法，详见<a href="https://www.cnblogs.com/ginvip/p/6352157.html">博客</a>。</p><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>​        Linux grep 命令用于查找文件里符合条件的字符串。</p><p>​        <strong>用法</strong>：<br>​        grep  [选项]  “模式”  [文件]<br>​        选项参数：<br>​        -E ：开启扩展（Extend）的正则表达式。<br>​        -i ：忽略大小写（ignore case）。<br>​        -v ：反过来（invert），只打印没有匹配的，而匹配的反而不打印。<br>​        -n ：显示行号<br>​        -w ：被匹配的文本只能是单词，而不能是单词中的某一部分，如文本中有liker，搜寻的只是like，可以使用-w选项来避免匹配liker<br>​        -c ：显示总共有多少行被匹配到了，而不是显示被匹配到的内容，注意如果同时使用-cv选项是显示有多少行没有被匹配到。<br>​        -o ：只显示被模式匹配到的字符串。<br>​        –color :将匹配到的内容以颜色高亮显示。<br>​        -A  n：显示匹配到的字符串所在的行及其后n行，after<br>​        -B  n：显示匹配到的字符串所在的行及其前n行，before<br>​        -C  n：显示匹配到的字符串所在的行及其前后各n行，context<br>​        模式参数：<br>​        直接输入要匹配的字符串或者使用基本正则表达式<br>​        更多grep用法，详见<a href="https://www.zsythink.net/archives/1733">博客</a>。</p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>​        Shell具有一般的编程语言的很多特点，使用Shell可以实现一定的自动化操作，与之比较相似的编程语言为Python，Shell是运维，大数据等领域的必须要掌握的技术。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法（三）</title>
    <link href="/2022/02/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2022/02/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法（三）"><a href="#数据结构与算法（三）" class="headerlink" title="数据结构与算法（三）"></a>数据结构与算法（三）</h1><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>​        依次遍历数组的各个元素，如果前一个元素大于后一个元素，那么就交换这两个元素的位置。经过一轮遍历后，最大的元素会位于数组尾端，多次重复此过程即可使数组有序排列。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSorting</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; array.length - <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (array[j] &gt; array[j + <span class="hljs-number">1</span>]) &#123;<br>                    temp = array[j];<br>                    array[j] = array[j + <span class="hljs-number">1</span>];<br>                    array[j + <span class="hljs-number">1</span>] = temp;<br>                    flag = <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            flag = <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>​        每次从数组中取出一个元素，放入另一个临时数组中，当向临时数组放入元素时，依次遍历临时数组，直到找到使临时数组有序的插入位置插入此元素。<br><strong>实现方式一</strong>：借助临时数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] insertSorting(<span class="hljs-keyword">int</span>[] array) &#123;<br>        <span class="hljs-keyword">int</span>[] sorted_array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[array.length];<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">int</span> position = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (sorted_array[j] &gt; array[i]) &#123;<br>                    flag = <span class="hljs-keyword">true</span>;<br>                    position = j;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                System.arraycopy(sorted_array, position, sorted_array, position + <span class="hljs-number">1</span>, i - position);<br>                sorted_array[position] = array[i];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                sorted_array[i] = array[i];<br>            &#125;<br>            flag = <span class="hljs-keyword">false</span>;<br>            position = -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sorted_array;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>实现方式二</strong>：在原数组上操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertSorting1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">int</span> position;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; array.length; i++) &#123;<br>            temp = array[i];<br>            position = i - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (position &gt;= <span class="hljs-number">0</span> &amp;&amp; temp &lt; array[position]) &#123;<br>                array[position + <span class="hljs-number">1</span>] = array[position];<br>                position--;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (position + <span class="hljs-number">1</span> != i) &#123;<br>                array[position + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>每次从数组的第i+1个元素到尾端元素取出最小的一个，将其放入数组的第i个的位置即可，其中i从0开始计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectSorting</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">int</span> position;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            position = i;<br>            temp = array[i];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; array.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (temp &gt; array[j]) &#123;<br>                    temp = array[j];<br>                    position = j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (position != i) &#123;<br>                array[position] = array[i];<br>                array[i] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>​        希尔排序的基本思想在于将数组不断分组，对于每次分组后的各个局部数组使用插入排序使其有序。每次分组的各个局部数组相同位置的元素的下标之间的差值都会缩小一倍，直到差值为1退出循环。</p><p><strong>实现方式一</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSorting</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> gap = array.length / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">while</span> (gap &gt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i &lt; array.length; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i - gap; j &gt;= <span class="hljs-number">0</span>; j -= gap) &#123;<br>                    <span class="hljs-keyword">if</span> (array[j] &gt; array[j + gap]) &#123;<br>                        temp = array[j];<br>                        array[j] = array[j + gap];<br>                        array[j + gap] = temp;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            gap = gap / <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>实现方式二</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSorting1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> gap = array.length / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span> (gap &gt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i &lt; array.length; i++) &#123;<br>                <span class="hljs-keyword">int</span> j = i;<br>                <span class="hljs-keyword">int</span> temp = array[j];<br>                <span class="hljs-keyword">if</span> (array[j] &lt; array[j - gap]) &#123;<br>                    <span class="hljs-keyword">while</span> (j - gap &gt;= <span class="hljs-number">0</span> &amp;&amp; temp &lt; array[j - gap]) &#123;<br>                        array[j] = array[j - gap];<br>                        j -= gap;<br>                    &#125;<br>                    array[j] = temp;<br>                &#125;<br>            &#125;<br>            gap = gap / <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法（二）</title>
    <link href="/2022/02/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/02/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法（二）"><a href="#数据结构与算法（二）" class="headerlink" title="数据结构与算法（二）"></a>数据结构与算法（二）</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈是一种先入后出的有序列表，它只允许在一端进行插入与删除，此端称为栈顶，另一端称为栈底。使用数组模拟栈：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayStack</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> stack_length;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] stack_array;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> point;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayStack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> stack_length)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.stack_length = stack_length;<br>        <span class="hljs-keyword">this</span>.point = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">this</span>.stack_array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[stack_length];<br>    &#125;<br><br>    <span class="hljs-comment">// 栈满</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> point == stack_length - <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 栈空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> point == -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 入栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The stack is full now!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">this</span>.point ++;<br>        stack_array[point] = num;<br>    &#125;<br><br>    <span class="hljs-comment">// 出栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;The stack is empty now!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack_array[<span class="hljs-keyword">this</span>.point --];<br>    &#125;<br><br>    <span class="hljs-comment">// 显示数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show_all_data</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The stack is empty now!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= point; i++) &#123;<br>            System.out.println(stack_array[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用栈制作计算器（中缀表达式）：<br>中缀表达式就是人进行计算使用的计算式的形式，例如10+10*20-20</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalculatorViaStack</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String formula = <span class="hljs-string">&quot;10+10*20-20&quot;</span>;<br>        Stack&lt;Integer&gt; num_stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        Stack&lt;String&gt; ope_stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        String temp;<br>        <span class="hljs-keyword">int</span> result;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; formula.length(); i++) &#123;<br>            temp = formula.substring(i, i + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (isOperator(temp)) &#123;<br>                <span class="hljs-keyword">if</span> (ope_stack.size() != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (!isPriority(temp, ope_stack.peek())) &#123;<br>                        num_stack.push(calculate(ope_stack.pop(), num_stack.pop(), num_stack.pop()));<br>                    &#125;<br>                &#125;<br>                ope_stack.push(temp);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">while</span> ((i + <span class="hljs-number">2</span>) &lt;= formula.length() &amp;&amp; !isOperator(formula.substring(i + <span class="hljs-number">1</span>, i + <span class="hljs-number">2</span>))) &#123;<br>                    temp += formula.substring(i + <span class="hljs-number">1</span>, i + <span class="hljs-number">2</span>);<br>                    i++;<br>                &#125;<br>                num_stack.push(Integer.parseInt(temp));<br>            &#125;<br>        &#125;<br>        result = calculate(ope_stack.pop(), num_stack.pop(), num_stack.pop());<br>        <span class="hljs-keyword">while</span> (ope_stack.size() != <span class="hljs-number">0</span>) &#123;<br>            result = calculate(ope_stack.pop(), num_stack.pop(), result);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;The result is &quot;</span> + result);<br>    &#125;<br><br>    <span class="hljs-comment">// 是否是运算符</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isOperator</span><span class="hljs-params">(String ope)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (ope.equals(<span class="hljs-string">&quot;*&quot;</span>)) || (ope.equals(<span class="hljs-string">&quot;/&quot;</span>)) || (ope.equals(<span class="hljs-string">&quot;+&quot;</span>)) || (ope.equals(<span class="hljs-string">&quot;-&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 运算符优先级</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPriority</span><span class="hljs-params">(String ope1, String ope2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (ope1.equals(<span class="hljs-string">&quot;*&quot;</span>) || ope1.equals(<span class="hljs-string">&quot;/&quot;</span>)) &amp;&amp; ((ope2.equals(<span class="hljs-string">&quot;+&quot;</span>) || ope2.equals(<span class="hljs-string">&quot;-&quot;</span>)));<br>    &#125;<br><br>    <span class="hljs-comment">// 运算符计算</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(String ope, <span class="hljs-keyword">int</span> num2, <span class="hljs-keyword">int</span> num1)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!isOperator(ope)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Illegal operator！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">switch</span> (ope) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>                <span class="hljs-keyword">return</span> num1 * num2;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>                <span class="hljs-keyword">return</span> num1 / num2;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>                <span class="hljs-keyword">return</span> num1 + num2;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> num1 - num2;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用栈制作计算器（后缀表达式）：<br>后缀表达式便于计算机计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalculatorByPostfix</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String express = <span class="hljs-string">&quot;1+((20+3)*4)-5&quot;</span>;<br>        String[] strings = getPostfix(express);<br>        <span class="hljs-keyword">for</span> (String string : strings) &#123;<br>            System.out.println(string);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;The result is &quot;</span> + calculate_postfix(strings));<br>    &#125;<br><br>    <span class="hljs-comment">// 计算后缀表达式</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate_postfix</span><span class="hljs-params">(String[] postfix_array)</span> </span>&#123;<br>        Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String s : postfix_array) &#123;<br>            <span class="hljs-keyword">if</span> (isOperator(s)) &#123;<br>                stack.push(calculate(s, stack.pop(), stack.pop()));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                stack.push(Integer.parseInt(s));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.pop();<br>    &#125;<br><br>    <span class="hljs-comment">// 中缀表达式转后缀表达式</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] getPostfix(String express) &#123;<br>        Stack&lt;String&gt; transition_stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        Stack&lt;String&gt; result_stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        String temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; express.length(); i++) &#123;<br>            temp = express.substring(i, i + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (isOperator(temp)) &#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (transition_stack.size() == <span class="hljs-number">0</span> || transition_stack.peek().equals(<span class="hljs-string">&quot;(&quot;</span>)) &#123;<br>                        transition_stack.push(temp);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isPriority(temp, transition_stack.peek())) &#123;<br>                        transition_stack.push(temp);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        result_stack.push(transition_stack.pop());<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (temp.equals(<span class="hljs-string">&quot;(&quot;</span>)) &#123;<br>                    transition_stack.push(temp);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.equals(<span class="hljs-string">&quot;)&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">while</span> (!transition_stack.peek().equals(<span class="hljs-string">&quot;(&quot;</span>)) &#123;<br>                        result_stack.push(transition_stack.pop());<br>                    &#125;<br>                    transition_stack.pop();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">while</span> ((i + <span class="hljs-number">2</span>) &lt;= express.length() &amp;&amp; !isOperator(express.substring(i + <span class="hljs-number">1</span>, i + <span class="hljs-number">2</span>)) &amp;&amp; express.charAt(i + <span class="hljs-number">1</span>) != <span class="hljs-string">&#x27;(&#x27;</span> &amp;&amp; express.charAt(i + <span class="hljs-number">1</span>) != <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>                        temp += express.substring(i + <span class="hljs-number">1</span>, i + <span class="hljs-number">2</span>);<br>                        i++;<br>                    &#125;<br>                    result_stack.push(temp);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (transition_stack.size() != <span class="hljs-number">0</span>) &#123;<br>            result_stack.push(transition_stack.pop());<br>        &#125;<br>        String[] postfix_array = <span class="hljs-keyword">new</span> String[result_stack.size()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = result_stack.size() - <span class="hljs-number">1</span>; i &gt; -<span class="hljs-number">1</span>; i--) &#123;<br>            postfix_array[i] = result_stack.pop();<br>        &#125;<br>        <span class="hljs-keyword">return</span> postfix_array;<br>    &#125;<br><br>    <span class="hljs-comment">// 运算符优先级</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPriority</span><span class="hljs-params">(String ope1, String ope2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (ope1.equals(<span class="hljs-string">&quot;*&quot;</span>) || ope1.equals(<span class="hljs-string">&quot;/&quot;</span>)) &amp;&amp; ((ope2.equals(<span class="hljs-string">&quot;+&quot;</span>) || ope2.equals(<span class="hljs-string">&quot;-&quot;</span>)));<br>    &#125;<br><br>    <span class="hljs-comment">// 是否是运算符</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isOperator</span><span class="hljs-params">(String ope)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (ope.equals(<span class="hljs-string">&quot;*&quot;</span>)) || (ope.equals(<span class="hljs-string">&quot;/&quot;</span>)) || (ope.equals(<span class="hljs-string">&quot;+&quot;</span>)) || (ope.equals(<span class="hljs-string">&quot;-&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 运算符计算</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(String ope, <span class="hljs-keyword">int</span> num2, <span class="hljs-keyword">int</span> num1)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!isOperator(ope)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Illegal operator！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">switch</span> (ope) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>                <span class="hljs-keyword">return</span> num1 * num2;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>                <span class="hljs-keyword">return</span> num1 / num2;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>                <span class="hljs-keyword">return</span> num1 + num2;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> num1 - num2;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归是方法自己调用自己，有助于将复杂的问题变简单。递归每调用一次，就创建一个存放方法的栈空间，每个方法的局部变量都是独立的。递归必须向退出递归的方向逼近。<br>使用递归解决迷宫问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FindWayByRecursion</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[][] maze = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, <br>                        &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, <br>                        &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;,<br>                        &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;&#125;;<br>        <span class="hljs-keyword">boolean</span> way = findWay(maze, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (way) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; maze.length; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; maze[<span class="hljs-number">0</span>].length; j++) &#123;<br>                    System.out.print(maze[i][j]);<br>                &#125;<br>                System.out.println();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">findWay</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] maze, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (maze[<span class="hljs-number">6</span>][<span class="hljs-number">6</span>] == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (maze[i][j] == <span class="hljs-number">0</span>) &#123;<br>                maze[i][j] = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span> (findWay(maze, i, j + <span class="hljs-number">1</span>)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(maze, i + <span class="hljs-number">1</span>, j)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(maze, i, j - <span class="hljs-number">1</span>)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(maze, i - <span class="hljs-number">1</span>, j)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    maze[i][j] = <span class="hljs-number">3</span>;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法（一）</title>
    <link href="/2022/01/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/01/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法（一）"><a href="#数据结构与算法（一）" class="headerlink" title="数据结构与算法（一）"></a>数据结构与算法（一）</h1><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><p>稀疏数组是指一个数组中有许多重复的值，例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>可以将其记为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">11</span> <span class="hljs-number">11</span> <span class="hljs-number">2</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">2</span> <span class="hljs-number">1</span><br> <span class="hljs-attribute">2</span>  <span class="hljs-number">4</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>这样就减少了存储空间。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SparseArray</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[][] test_array =  <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>];<br>        test_array[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br>        test_array[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">9</span>;<br><br>        <span class="hljs-keyword">int</span>[][] change_array = change_array(test_array);<br>        System.out.println(Arrays.deepToString(change_array));<br><br>        <span class="hljs-keyword">int</span>[][] restore_array = restore_array(change_array);<br>        System.out.println(Arrays.deepToString(restore_array));<br>    &#125;<br><br>    <span class="hljs-comment">// 压缩数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[][] change_array(<span class="hljs-keyword">int</span>[][] sparse_array) &#123;<br>        <span class="hljs-keyword">int</span> row = sparse_array.length;<br>        <span class="hljs-keyword">int</span> col = sparse_array[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; row; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; col; j++) &#123;<br>                <span class="hljs-keyword">if</span> (sparse_array[i][j] != <span class="hljs-number">0</span>) &#123;<br>                    sum ++;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span>[][] aim_array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[sum + <span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br>        aim_array[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = row;<br>        aim_array[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = col;<br>        aim_array[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sum;<br>        sum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; row; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; col; j++) &#123;<br>                <span class="hljs-keyword">if</span> (sparse_array[i][j] != <span class="hljs-number">0</span>) &#123;<br>                    sum ++;<br>                    aim_array[sum][<span class="hljs-number">0</span>] = i;<br>                    aim_array[sum][<span class="hljs-number">1</span>] = j;<br>                    aim_array[sum][<span class="hljs-number">2</span>] = sparse_array[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> aim_array;<br>    &#125;<br><br>    <span class="hljs-comment">// 还原数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[][] restore_array(<span class="hljs-keyword">int</span>[][] changed_array) &#123;<br>        <span class="hljs-keyword">int</span>[][] original_array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[changed_array[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][changed_array[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= changed_array[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]; i++) &#123;<br>            original_array[changed_array[i][<span class="hljs-number">0</span>]][changed_array[i][<span class="hljs-number">1</span>]] = changed_array[i][<span class="hljs-number">2</span>];<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> original_array;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列是一种线性表结构，遵循先入先出原则。通过数组模拟队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayQueue</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> head_pointer = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> end_pointer = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] array_queue;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.array_queue = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[size + <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 队列是否空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> head_pointer == end_pointer;<br>    &#125;<br><br>    <span class="hljs-comment">// 队列是否满</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (end_pointer + <span class="hljs-number">1</span>) % array_queue.length == head_pointer;<br>    &#125;<br><br>    <span class="hljs-comment">// 添加数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_data</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Now the queue is full!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        array_queue[end_pointer] = data;<br>        end_pointer = (end_pointer + <span class="hljs-number">1</span>) % array_queue.length;<br>    &#125;<br><br>    <span class="hljs-comment">// 取出数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_data</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Now the queue is empty!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">int</span> temp = head_pointer;<br>        head_pointer = (head_pointer + <span class="hljs-number">1</span>) % array_queue.length;<br>        <span class="hljs-keyword">return</span> array_queue[temp];<br>    &#125;<br><br>    <span class="hljs-comment">// 获取全部数据信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] get_all_data() &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Now the queue is empty!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">int</span> real_size = (end_pointer + array_queue.length - head_pointer) %                  array_queue.length;<br>        <span class="hljs-keyword">int</span>[] aim_queue = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[real_size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; real_size; i++) &#123;<br>            aim_queue[i] = array_queue[(head_pointer + i) % array_queue.length];<br>        &#125;<br>        <span class="hljs-keyword">return</span> aim_queue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表是一种有序的列表，它以节点的方式来存储，每个节点包含数据和下一个节点的位置，链表的节点并不一定是顺序存储的。</p><p>实现单向链表:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> LinkedListNode head_node = <span class="hljs-keyword">new</span> LinkedListNode(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-comment">// 添加节点至结尾</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addDataToEnd</span><span class="hljs-params">(LinkedListNode node)</span> </span>&#123;<br>        LinkedListNode temp = head_node;<br>        <span class="hljs-keyword">while</span> (temp.next != <span class="hljs-keyword">null</span>) &#123;<br>            temp = temp.next;<br>        &#125;<br>        temp.next = node;<br>    &#125;<br><br>    <span class="hljs-comment">// 顺序添加节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addDataByOrder</span><span class="hljs-params">(LinkedListNode node)</span> </span>&#123;<br>        LinkedListNode temp = head_node;<br>        <span class="hljs-keyword">while</span> (temp.next != <span class="hljs-keyword">null</span> &amp;&amp; temp.next.serial_number &lt; node.serial_number) &#123;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (temp.next != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (node.serial_number == temp.serial_number) &#123;<br>                System.out.println(<span class="hljs-string">&quot;The same element exists!&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            node.next = temp.next;<br>            temp.next = node;<br>        &#125;<br>        temp.next = node;<br>    &#125;<br><br>    <span class="hljs-comment">// 修改节点信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modifyNodeInfo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial_number, String info)</span> </span>&#123;<br>        LinkedListNode node = getSpecialNode(serial_number);<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        node.info = info;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial_number)</span> </span>&#123;<br>        LinkedListNode temp = head_node;<br>        <span class="hljs-keyword">while</span> (temp.next.next != <span class="hljs-keyword">null</span> &amp;&amp; temp.next.serial_number != serial_number) &#123;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (temp.next.next == <span class="hljs-keyword">null</span> &amp;&amp; temp.next.serial_number != serial_number) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Cannot find the element!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.next.next != <span class="hljs-keyword">null</span>) &#123;<br>            temp.next = temp.next.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            temp.next = <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示链表信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showLinkedList</span><span class="hljs-params">()</span> </span>&#123;<br>        LinkedListNode temp = head_node.next;<br>        <span class="hljs-keyword">while</span> (temp != <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(temp);<br>            temp = temp.next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 查找指定节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> LinkedListNode <span class="hljs-title">getSpecialNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial_number)</span> </span>&#123;<br>        LinkedListNode temp = head_node;<br>        <span class="hljs-keyword">while</span> (temp.next != <span class="hljs-keyword">null</span> &amp;&amp; temp.serial_number != serial_number) &#123;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span> &amp;&amp; temp.serial_number != serial_number) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Cannot find the element!&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedListNode</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> serial_number;<br>    <span class="hljs-keyword">public</span> String info;<br>    <span class="hljs-keyword">public</span> LinkedListNode next;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkedListNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial_number, String info)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.serial_number = serial_number;<br>        <span class="hljs-keyword">this</span>.info = info;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;serial_number: &quot;</span> + serial_number + <span class="hljs-string">&quot;, info: &quot;</span> + info;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现双向链表:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleLinkedList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> DoubleLinkedListNode head_node = <span class="hljs-keyword">new</span> DoubleLinkedListNode(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-comment">// 顺序添加节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addNodeByOrder</span><span class="hljs-params">(DoubleLinkedListNode node)</span> </span>&#123;<br>        DoubleLinkedListNode temp = head_node;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp.serial_number == node.serial_number) &#123;<br>                System.out.println(<span class="hljs-string">&quot;The same element has existed!&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.serial_number &gt; node.serial_number) &#123;<br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!flag) &#123;<br>            temp.next = node;<br>            node.pre = temp;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        temp.pre.next = node;<br>        node.next = temp;<br>        node.pre = temp.pre;<br>        temp.pre = node;<br>    &#125;<br><br>    <span class="hljs-comment">// 修改节点信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modifyInfo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial_number, String info)</span> </span>&#123;<br>        DoubleLinkedListNode specialNode = getSpecialNode(serial_number);<br>        <span class="hljs-keyword">if</span> (specialNode == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Cannot find designated node!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        specialNode.info = info;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial_number)</span> </span>&#123;<br>        DoubleLinkedListNode specialNode = getSpecialNode(serial_number);<br>        <span class="hljs-keyword">if</span> (specialNode == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Cannot find designated node!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (specialNode.next == <span class="hljs-keyword">null</span>) &#123;<br>            specialNode.pre.next = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        specialNode.pre.next = specialNode.next;<br>        specialNode.next.pre = specialNode.pre;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示链表信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getListInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        DoubleLinkedListNode temp = head_node;<br>        <span class="hljs-keyword">while</span> (temp.next != <span class="hljs-keyword">null</span>) &#123;<br>            temp = temp.next;<br>            System.out.println(temp);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 查找指定节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DoubleLinkedListNode <span class="hljs-title">getSpecialNode</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> serial_number)</span> </span>&#123;<br>        DoubleLinkedListNode temp = head_node;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp.serial_number == serial_number) &#123;<br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-keyword">return</span> temp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleLinkedListNode</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> serial_number;<br>    <span class="hljs-keyword">public</span> String info;<br>    <span class="hljs-keyword">public</span> DoubleLinkedListNode next;<br>    <span class="hljs-keyword">public</span> DoubleLinkedListNode pre;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DoubleLinkedListNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial_number, String info)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.serial_number = serial_number;<br>        <span class="hljs-keyword">this</span>.info = info;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;serial_number: &quot;</span> + serial_number + <span class="hljs-string">&quot;, info: &quot;</span> + info;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Javascript搭建聊天室</title>
    <link href="/2022/01/27/%E4%BD%BF%E7%94%A8Javascript%E6%90%AD%E5%BB%BA%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <url>/2022/01/27/%E4%BD%BF%E7%94%A8Javascript%E6%90%AD%E5%BB%BA%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>程序主体使用Javascript编写，用到了Nodejs，express和Peerjs等Javascript库，所以需要对Javascript有一定的了解。Javascript是一种非常简单的脚本语言，可以用来控制网页交互，做服务器后台，制作桌面端软件与安卓app，甚至可以用于机器学习。</p><h1 id="WebRTC与Peerjs"><a href="#WebRTC与Peerjs" class="headerlink" title="WebRTC与Peerjs"></a>WebRTC与Peerjs</h1><p>WebRTC，名称源自网页即时通信（英语：Web Real-Time Communication）的缩写，是一个支持网页浏览器进行实时语音对话或视频对话的API。它于2011年6月1日开源并在Google、Mozilla、Opera支持下被纳入万维网联盟的W3C推荐标准。通俗一点讲，WebRTC为网页端视频通话提供了接口，使开发者能够在浏览器上更简单的开发视频通话功能。Peerjs是对WebRTC的进一步封装，实现了真正的浏览器上的点对点数据通讯，使用起来也更加简单。</p><h1 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h1><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><p>在安装依赖包之前确保已经安装了Node，检查方法：命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">node -v<br></code></pre></td></tr></table></figure><p>安装express依赖包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install express<br></code></pre></td></tr></table></figure><p>安装Peerjs(使用本地信令服务器)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install peer<br></code></pre></td></tr></table></figure><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>使用Peerjs首先需要一个信令服务器用于连接两个客户端，你可以使用自己的本地信令服务器，也可以使用Peerjs提供的云端信令服务器。搭建自己的信令服务器非常简单，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">var</span> PeerServer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;peer&#x27;</span>).PeerServer;<br> <br><span class="hljs-keyword">var</span> server = PeerServer(&#123;<br>  <span class="hljs-attr">port</span>: <span class="hljs-number">8090</span>,<br>  <span class="hljs-attr">ssl</span>: &#123;<br>  <span class="hljs-attr">key</span>: fs.readFileSync(<span class="hljs-string">&#x27;../certificates/server.key&#x27;</span>),<br>  <span class="hljs-attr">cert</span>: fs.readFileSync(<span class="hljs-string">&#x27;../certificates/server.crt&#x27;</span>)<br>&#125;,<br>  <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/peerjs&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>如果使用Peerjs提供的云端信令服务器，只需在html文件中引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着搭建在线用户查询服务器，服务代码使用Nodejs编写，主要功能为提供网页数据，提供在线成员信息，为每个成员生成唯一id。这些功能对于Peerjs来说这些是非必需的，你也可以跳过此步骤。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">var</span> app = express();<br><br><span class="hljs-comment">// 存储用户信息</span><br><span class="hljs-keyword">let</span> p = &#123;<br>  <span class="hljs-string">&quot;admin&quot;</span>: <span class="hljs-number">111111</span>,<br>&#125;<br><br><span class="hljs-comment">// 生成6位id</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getID</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> Num = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>    Num += <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> Num;<br>&#125;<br><br><span class="hljs-comment">// 解决express跨域问题</span><br>app.all(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.header(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<br>  res.header(<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="hljs-string">&#x27;Content-Type, Content-Length, Authorization, Accept, X-Requested-With&#x27;</span>);<br>  res.header(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="hljs-string">&#x27;PUT, POST, GET, DELETE, OPTIONS&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (req.method == <span class="hljs-string">&#x27;OPTIONS&#x27;</span>) &#123;<br>    res.send(<span class="hljs-number">200</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;<br>    next();<br>  &#125;<br>&#125;);<br><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  fs.readFile(<span class="hljs-string">&#x27;./index.html&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.stack)<br>    &#125;<br>    res.send(data.toString())<br>    res.end()<br>  &#125;)<br>&#125;)<br><br>app.get(<span class="hljs-string">&#x27;/register/:name&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  user_arr = <span class="hljs-built_in">Object</span>.keys(p);<br>  <span class="hljs-keyword">if</span> (user_arr.includes(req.params.name)) &#123;<br>    res.writeHead(<span class="hljs-string">&#x27;412&#x27;</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span> &#125;)<br>    res.end(<span class="hljs-string">&#x27;The name has been used!&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">const</span> myID = getID()<br>    p[req.params.name] = myID;<br>    res.writeHead(<span class="hljs-string">&#x27;200&#x27;</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span> &#125;)<br>    res.write(myID);<br>    res.end()<br>  &#125;<br>&#125;)<br><br>app.get(<span class="hljs-string">&#x27;/getAllUser&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.writeHead(<span class="hljs-string">&#x27;200&#x27;</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span> &#125;)<br>  res.write(<span class="hljs-built_in">JSON</span>.stringify(p));<br>  res.end()<br>&#125;)<br><br>app.get(<span class="hljs-string">&#x27;/getSpecialUser/:name&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  user_arr = <span class="hljs-built_in">Object</span>.keys(p);<br>  <span class="hljs-keyword">if</span> (user_arr.includes(req.params.name)) &#123;<br>    aim = p[req.params.name]<br>    res.writeHead(<span class="hljs-string">&#x27;200&#x27;</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span> &#125;)<br>    res.write(aim);<br>    res.end()<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.writeHead(<span class="hljs-string">&#x27;404&#x27;</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span> &#125;)<br>    res.write(<span class="hljs-string">&#x27;Can not find the user!&#x27;</span>)<br>    res.end<br>  &#125;<br><br>&#125;)<br><br>app.listen(<span class="hljs-number">8080</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;The application is running on http://localhost:8080&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h2><p>网页的html与css代码非常简单，没有用到任何框架。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>let&#x27;s chat!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.title</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.message_me</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">text-align</span>: right;</span><br><span class="css">      <span class="hljs-attribute">color</span>: bisque;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-id">#chatSpace</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">90vh</span>;</span><br><span class="css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">205</span>, <span class="hljs-number">211</span>, <span class="hljs-number">211</span>);</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.message_system</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">      <span class="hljs-attribute">color</span>: darkgreen;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.message_other</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">text-align</span>: left;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-id">#online_user</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">float</span>: left;</span><br><span class="css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">25vh</span>;</span><br><span class="css">      <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.video_left</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">      <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">250px</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.video_right</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">      <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">250px</span>;</span><br><span class="css">    &#125;</span><br><span class="css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>let&#x27;s chat!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: right;&quot;</span>&gt;</span><br>      my name:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myName&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;register&quot;</span>&gt;</span>register<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      target name:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;targetName&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">HR</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;online_user&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>当前在线：<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUser&quot;</span>&gt;</span>refresh<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;chatSpace&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span>Chat Record<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;send_msg&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;connect&quot;</span>&gt;</span>send<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;video&quot;</span>&gt;</span>video call<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;videoSpace&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 主要功能代码...</span></span><br><span class="javascript">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>主要功能代码的流程为注册名字，建立peer连接，发送消息与视频聊天。<br><strong>注册名字</strong>：点击register按钮后，向服务器发送myName输入框的值，获取服务器返回的6位id。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用XMLHttpRequest发送请求</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createXHR</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-keyword">var</span> XHR = [<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> XMLHttpRequest() &#125;,<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Msxml2.XMLHTTP&quot;</span>) &#125;,<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Msxml3.XMLHTTP&quot;</span>) &#125;,<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>) &#125;<br>     ];<br>     <span class="hljs-keyword">var</span> xhr = <span class="hljs-literal">null</span>;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; XHR.length; i++) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>         xhr = XHR[i]();<br>       &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>         <span class="hljs-keyword">continue</span><br>       &#125;<br>       <span class="hljs-keyword">break</span>;<br>     &#125;<br>     <span class="hljs-keyword">return</span> xhr;<br>   &#125;<br><br><span class="hljs-comment">// 获取id</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUserID</span>(<span class="hljs-params">name</span>) </span>&#123;<br>     <span class="hljs-keyword">var</span> xhr = createXHR();<br>     xhr.open(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;http://localhost:8080/getSpecialUser/&quot;</span> + name, <span class="hljs-literal">false</span>);<br>     xhr.send(<span class="hljs-literal">null</span>);<br>     <span class="hljs-keyword">if</span> (xhr.status == <span class="hljs-number">412</span>) &#123;<br>       alert(xhr.responseText);<br>       <span class="hljs-keyword">return</span>;<br>     &#125;<br>     <span class="hljs-keyword">return</span> xhr.responseText;<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>建立peer连接</strong>(peer.on(…) 使用事件驱动模型，每当条件满足就触发回调函数)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> peer = <span class="hljs-keyword">new</span> Peer(xhr.responseText);<br><br><span class="hljs-comment">// 连接成功触发</span><br>peer.on(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">id</span>) </span>&#123;<br>  chatSpace.innerHTML += <span class="hljs-string">&quot;&lt;div class=&#x27;message_system&#x27;&gt;system : register success &quot;</span> + id + <span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>;<br>  &#125;);<br><br><span class="hljs-comment">// 接收消息触发</span><br>peer.on(<span class="hljs-string">&#x27;connection&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">conn1</span>) =&gt;</span> &#123;<br>  conn1.on(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> msg = <span class="hljs-built_in">JSON</span>.parse(data);<br>  &#125;<br>  chatSpace.innerHTML += <span class="hljs-string">&quot;&lt;div class=&#x27;message_other&#x27;&gt;&quot;</span> + msg.from + <span class="hljs-string">&quot; : &quot;</span> + msg.body + <span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>;<br>  <span class="hljs-keyword">if</span> (targetName.value.length == <span class="hljs-number">0</span>) &#123;<br>    targetName.value = msg.from;<br>  &#125;   <br>&#125;<br> <br>          <br></code></pre></td></tr></table></figure><p><strong>发送消息：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建到对方的连接</span><br>conn = peer.connect(getUserID(targetName.value));<br><span class="hljs-comment">// 发送消息</span><br>conn.send(<span class="hljs-built_in">JSON</span>.stringify(message));<br>chatSpace.innerHTML += <span class="hljs-string">&quot;&lt;div class=&#x27;message_me&#x27;&gt;&quot;</span> + message.from + <span class="hljs-string">&quot; : &quot;</span> + message.body + <span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>;<br>send_msg.value = <span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>视频聊天：</strong><br>开启摄像头：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 将摄像头视频流赋值给localVideo</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gotLocalMediaStream</span>(<span class="hljs-params">mediaStream</span>) </span>&#123;<br>  localVideo = mediaStream;<br>  myVideo.srcObject = mediaStream;<br>  &#125;<br><br><span class="hljs-keyword">const</span> mediaStreamConstraints = &#123;<br>   <span class="hljs-attr">video</span>: &#123;<br>     <span class="hljs-attr">height</span>: &#123;<br>       <span class="hljs-attr">min</span>: <span class="hljs-number">250</span><br>     &#125;<br>    &#125;<br>  &#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleLocalMediaStreamError</span>(<span class="hljs-params">error</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;navigator.getUserMedia error: &#x27;</span>, error);<br>  &#125;<br><br><span class="hljs-comment">//开启本地摄像头</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">start</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) &#123;<br>    alert(<span class="hljs-string">&quot;webrtc is not supported!&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>    &#125;<br>  navigator.mediaDevices.getUserMedia(mediaStreamConstraints)<br>    .then(gotLocalMediaStream).catch(handleLocalMediaStreamError);<br>    &#125;<br></code></pre></td></tr></table></figure><p>发起视频：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">videoSpace.innerHTML = <span class="hljs-string">&#x27;&lt;video id=&quot;localVideo&quot; autoplay controls class=&quot;video_left&quot;&gt;&lt;/video&gt;&lt;video id=&quot;remoteVideo&quot; autoplay controls class=&quot;video_right&quot;&gt;&lt;/video&gt;&#x27;</span><br>myVideo = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;video#localVideo&#x27;</span>);<br>remoteVideo = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;video#remoteVideo&#x27;</span>);<br>start()<br><span class="hljs-keyword">var</span> test = <span class="hljs-literal">null</span>;<br>navigator.mediaDevices.getUserMedia(mediaStreamConstraints)<br>.then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">stream</span>) </span>&#123;<br>   test = stream;<br>   <span class="hljs-keyword">var</span> call_me = peer.call(getUserID(msg.from), test);<br>   call_me.on(<span class="hljs-string">&#x27;stream&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">stream</span>) </span>&#123;<br>     remoteVideo.srcObject = stream;<br>     &#125;);<br>   &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>&#123;<br>      <span class="hljs-comment">// do something</span><br>     &#125;);<br></code></pre></td></tr></table></figure><p>接受视频：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> call = peer.call(getUserID(msg.from), localVideo);<br>remoteVideo = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;video#remoteVideo&#x27;</span>);<br>call.on(<span class="hljs-string">&#x27;stream&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">stream</span>) </span>&#123;<br>  remoteVideo.srcObject = stream;<br>&#125;)<br></code></pre></td></tr></table></figure><p>当收到call请求时，需要返回自己本地的视频流：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">peer.on(<span class="hljs-string">&#x27;call&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">call</span>) </span>&#123;<br>  call.answer(localVideo);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>比较关键的代码就是这些，完整代码已上传<a href="https://gitee.com/tprocess/chat-demo">Gitee</a>。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>WebRTC实现了两个浏览器之间直接进行视频和音频的通信，不经过服务器，这在一定程度上保证了信息安全，对于从事音视频开发的开发者来说，WebRTC是非常重要的开源库。</p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>nodejs</tag>
      
      <tag>express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程编程</title>
    <link href="/2022/01/19/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/01/19/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是多线程"><a href="#什么是多线程" class="headerlink" title="什么是多线程"></a>什么是多线程</h1><p>线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元。与线程十分类似的概念还有进程，进程可以看做正在运行的程序，一个进程可以有多个线程。我们知道一般CPU都有多个核心，支持并行操作，使用多线程可以充分利用CPU的计算能力，同时提升程序运行速度。不同线程间资源可以共享，CPU在不同线程间的切换速度也非常快。</p><h1 id="在Java中创建线程"><a href="#在Java中创建线程" class="headerlink" title="在Java中创建线程"></a>在Java中创建线程</h1><h2 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h2><p>Thread类是Java的内置类，我们可以继承Thread类重写其中的run()方法，使用start()方法来开启线程，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是新的子线程&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>在main函数中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    TestThread thread = <span class="hljs-keyword">new</span> TestThread();<br>    thread.start();<br>    System.out.println(<span class="hljs-string">&quot;我是main线程&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h2><p>Runnable接口需要实现其中的run()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;我是新的子线程&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在main函数中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    TestThread thread = <span class="hljs-keyword">new</span> TestThread();<br>    thread.start();<br>    System.out.println(<span class="hljs-string">&quot;我是main线程&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>上述两种方法都可以开启多个线程，只要我们创建多个对象就可以。一般我们使用实现Runnable接口的方式来创建子线程，因为Java中类只能单继承，也就是说一个类只能有一个父类，实现Runnable方法就可以避免这个问题。<br>在Java中，每一个线程都有自己的名字，可以手动指定，也可以由Java自动生成，可以使用<code>Thread.currentThread()</code>来获取当前线程。线程的执行顺序是无法确定的，我们只能确定每一个线程都会被执行直到结束，一个线程只执行一次</p><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><p>每一个线程在生命周期内都会经历5个状态：新建、可运行、运行、阻塞、死亡。</p><ul><li>新建：线程已被创建，还未被调用。</li><li>可运行：线程准备运行，但系统还未选定它为运行线程。</li><li>运行：线程正在执行。</li><li>阻塞：线程可被运行，但当前并未运行，当其他线程释放，可进入运行状态。</li><li>死亡：线程运行结束。</li></ul><p>在线程中使用<code>Thread.sleep(long millis)</code>可以使线程进入休眠状态，在休眠状态中线程不会被调用；使用<code>Thread.yield()</code>方法来使当前线程退出；使用<code>join()</code>方法使一个线程排到另外一个线程尾部。</p><h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><p>当多个线程访问同一个资源，如果不加以处理，往往会出现问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(TestThread.i--);<br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">100</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    TestThread thread1 = <span class="hljs-keyword">new</span> TestThread();<br>    TestThread thread2 = <span class="hljs-keyword">new</span> TestThread();<br>    thread1.start();<br>    thread2.start();<br>    &#125;<br></code></pre></td></tr></table></figure><p>执行上述代码就会发现每次执行的结果都不一样，可能有的数字会出现多次，位置也无法预测。<br>我们可以通过加锁来解决这个问题。可以在方法上加锁，使用synchronized修饰：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">temp</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(TestThread.i--);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        temp();<br>    &#125;<br></code></pre></td></tr></table></figure><p>手动上锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        lock.lock();<br>        System.out.println(TestThread.i--);<br>        lock.unlock();<br>    &#125;<br></code></pre></td></tr></table></figure><p>当一个类已经很好的同步以保护它的数据时，这个类就称为“线程安全的”。<br>线程死锁：当两个线程被阻塞，每个线程在等待另一个线程时就发生死锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Runnable r1 = () -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;A&quot;</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;A线程持有A锁, 等待B锁&quot;</span>);<br>                <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;B&quot;</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;A线程持同时持有A锁和B锁&quot;</span>);<br> <br>                &#125;<br>            &#125;<br>        &#125;;<br>        Runnable r2 = () -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;B&quot;</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;B线程持有B锁, 等待A锁&quot;</span>);<br>                <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;A&quot;</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;B线程持同时持有A锁和B锁&quot;</span>);<br> <br>                &#125;<br>            &#125;<br>        &#125;;<br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(r1);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(r2);<br>        t1.start();<br>        t2.start();<br> <br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>Java中关于多线程和锁的知识还有很多，我们之后再介绍。不得不说锁的使用还是比较复杂的，不过它的功能也很强大，用好多线程可以使我们的程序效率高，健壮性好。下一篇会是关于Javascript中的webRTC的相关内容(或者是Unity)，个人觉得还是相当好玩的，欢迎各位持续关注。</p>]]></content>
    
    
    <categories>
      
      <category>Java语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建自己的博客网站</title>
    <link href="/2022/01/15/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <url>/2022/01/15/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>在开始搭建博客之前，需要检查环境是否符合以下要求：</p><h2 id="Node环境："><a href="#Node环境：" class="headerlink" title="Node环境："></a>Node环境：</h2><p>打开电脑命令行工具，输入以下命令</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs js">node -v<br></code></pre></td></tr></table></figure><p>如果提示“node不是内部或外部命令，也不是可运行的程序”，说明电脑中没有node环境，可以去<a href="http://nodejs.cn/download/">node</a>官网下载，具体配置方法请自行百度。</p><h2 id="Git工具"><a href="#Git工具" class="headerlink" title="Git工具"></a>Git工具</h2><p><a href="https://www.git-scm.com/download/win">Git</a>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。在命令行输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">git --version<br></code></pre></td></tr></table></figure><p>弹出对应版本号，即说明git安装成功。</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>进行此步之前，需要保证node与npm工具可以正常使用，在命令行输入以下命令来检查工具情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">node -v<br>npm -v<br></code></pre></td></tr></table></figure><p>如果一切正常，即可安装hexo，在git bash中(在命令行也可以，不过还是推荐git bash)输入如下命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>OK，做到这一步，我们的环境准备就完成了，接下来我们开始真正地搭建自己的博客网站。</p><h1 id="搭建blog网站"><a href="#搭建blog网站" class="headerlink" title="搭建blog网站"></a>搭建blog网站</h1><h2 id="本地创建blog文件夹"><a href="#本地创建blog文件夹" class="headerlink" title="本地创建blog文件夹"></a>本地创建blog文件夹</h2><p>在电脑上找一个合适的文件夹，在此文件夹里右键选择<code>git bash here</code>，进入git界面。</p><p>在git中输入以下命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo init<br></code></pre></td></tr></table></figure><p>hexo会自己下载网站的代码，格式文件以及图片等资源到你选定的文件夹。</p><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><p>当资源下载完成之后，文件夹里其实就包含了一个最简的blog网站，只需在git bash中输入如下命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>等待一会儿，git bash会提示你的网站运行在localhost:4000上，此时在浏览器输入此网站就可以访问你的第一个blog网站！</p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>hexo初始blog模板其实并不是太美观，有许多雷锋已经为我们做好各式各样的漂亮的<a href="https://hexo.io/themes/">网站主题</a>，我们可以直接拿来用。<br>访问hexo主题网站，选择一个自己喜欢的主题，跳转至github下载release包，将其解压至blog文件夹下的theme子文件夹里，最后更改blog文件夹下的_config.yml文件，将theme项后的值改为你选择主题的名字，重新执行以下命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>再次访问localhost:4000，即可发现网站已经变成了你选择的主题。</p><h2 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h2><p>更新完主题后我们还要更改网站的部分内容，例如标题。这些配置在你下载的theme主题里的 _config.yml文件里可以找到。这是一个主题配置的<a href="https://hexo.fluid-dev.com/docs/guide/">示例</a>。</p><p>OK，下面让我们写一篇blog吧。使用markdown可以简单方便地写出一篇博客，你可以把它当作简化版的html页面，有许多markdown编辑器，例如Typora。</p><p>需要注意的是，在markdown文件的开头，需要注明你的文章信息，格式如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">搭建自己的博客网站</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022</span><span class="hljs-string">/1/15</span> <span class="hljs-number">15</span><span class="hljs-string">:41:25</span><br><span class="hljs-attr">tag:</span> [<span class="hljs-string">hexo</span>, <span class="hljs-string">博客</span>]<br><span class="hljs-attr">categories:</span> [<span class="hljs-string">开源工具</span>]<br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>好了，至此为止我们就完成了所有的本地工作，接下来让我们把blog部署到GitHub上。</p><h2 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h2><p>在github上创建并设置远程库，将仓库名命名为<code>你的GitHub昵称+github.io</code>,创建之后，点击setting找到GitHub Pages，选择Automatic page generator即可。你可以输入地址(<a href="https://github昵称+github.io)测试github/">https://GitHub昵称+github.io)测试github</a> pager是否创建成功。</p><h2 id="部署blog网站"><a href="#部署blog网站" class="headerlink" title="部署blog网站"></a>部署blog网站</h2><p>我们马上就完成了！<br>修改在blog文件夹下的_config.yml文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">deploy:<br>  type: git<br>  <span class="hljs-attr">repo</span>: https:<span class="hljs-comment">//github.com/你的GitHub昵称/你的GitHub昵称.github.io.git</span><br>  branch: master<br></code></pre></td></tr></table></figure><p>安装部署工具</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo-deployer-git -save<br></code></pre></td></tr></table></figure><p>初始化本地仓库：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>连接远程仓库：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git remote add origin https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/wapchief/</span>wapchief.github.io.git<br></code></pre></td></tr></table></figure><p>发布hexo到github page：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo d<br></code></pre></td></tr></table></figure><p>添加文件到本地仓库：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git <span class="hljs-keyword">add</span><br></code></pre></td></tr></table></figure><p>提交声明：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&#x27;内容&#x27;</span><br></code></pre></td></tr></table></figure><p>推送到远程仓库这里建议创建一个新的分支hexo，用于管理hexo文件。提交的的时候只提交hexo网站html、css、等源文件，而默认的master用来部署更新项目。<br>创建并切换到新建分支：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> hexo<br></code></pre></td></tr></table></figure><p>将分支推送到远程仓库：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> hexo<br></code></pre></td></tr></table></figure><p>这时打开网站就能看到效果了。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>之所以要搞自己的博客网站是希望督促自己不要懒惰，每天都要学一点儿新东西(立个flag)，这是我写的第一篇blog，虽说并没有什么技术含量，写的也不怎么清晰，但我在写的时候一些原本模棱两可的东西变得清晰起来，说明写一写还是有点儿好处的，之后我会每隔两三天更新一次文章，如果你愿意的话可以收藏此网站，让我们一起进步！</p>]]></content>
    
    
    <categories>
      
      <category>开源工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
