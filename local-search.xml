<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用beego进行简单的增删改查</title>
    <link href="/2022/05/12/%E4%BD%BF%E7%94%A8beego%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <url>/2022/05/12/%E4%BD%BF%E7%94%A8beego%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="使用beego进行简单的增删改查"><a href="#使用beego进行简单的增删改查" class="headerlink" title="使用beego进行简单的增删改查"></a>使用beego进行简单的增删改查</h1><h2 id="创建beego项目"><a href="#创建beego项目" class="headerlink" title="创建beego项目"></a>创建beego项目</h2><p>首先安装beego创建工具bee，并将其加入环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">go get -u github.com/beego/bee/v2@master<br></code></pre></td></tr></table></figure><p>在自定文件夹下执行命令，program-name为自定项目名称：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bee new program-name<br></code></pre></td></tr></table></figure><p>进入program-name文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd program-name<br></code></pre></td></tr></table></figure><p>初始化项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go mod tidy<br></code></pre></td></tr></table></figure><p>启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bee run<br></code></pre></td></tr></table></figure><p>访问<a href="http://localhost:8080即可。下面写自定逻辑代码。">http://localhost:8080即可。下面写自定逻辑代码。</a></p><h2 id="配置conf"><a href="#配置conf" class="headerlink" title="配置conf"></a>配置conf</h2><p>由于涉及到mysql的增删改查，首先编辑conf文件夹下app.conf，添加mysql连接信息:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">host</span> = localhost<br><span class="hljs-attr">port</span> = <span class="hljs-number">3306</span><br><span class="hljs-attr">user</span> = root<br><span class="hljs-attr">password</span> = your-password<br><span class="hljs-attr">database</span> = your-db<br></code></pre></td></tr></table></figure><p>之后从配置文件中读取配置信息进行数据库连接。</p><h2 id="创建model"><a href="#创建model" class="headerlink" title="创建model"></a>创建model</h2><p>创建model之前，在数据库中创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">use test;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `person`(<br>   `user_id` <span class="hljs-type">INT</span> UNSIGNED AUTO_INCREMENT,<br>   `user_name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   `sex` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   `eamil` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   <span class="hljs-keyword">PRIMARY</span> KEY ( `user_id` )<br>)ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><p>编写初始化方法base.go：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Init</span><span class="hljs-params">()</span></span> &#123;<br>host, _ := beego.AppConfig.String(<span class="hljs-string">&quot;host&quot;</span>)<br>port, _ := beego.AppConfig.String(<span class="hljs-string">&quot;port&quot;</span>)<br>user, _ := beego.AppConfig.String(<span class="hljs-string">&quot;user&quot;</span>)<br>password, _ := beego.AppConfig.String(<span class="hljs-string">&quot;password&quot;</span>)<br>database, _ := beego.AppConfig.String(<span class="hljs-string">&quot;database&quot;</span>)<br><br>conMsg := user + <span class="hljs-string">&quot;:&quot;</span> + password + <span class="hljs-string">&quot;@tcp(&quot;</span> + host + <span class="hljs-string">&quot;:&quot;</span> + port + <span class="hljs-string">&quot;)/&quot;</span> + database + <span class="hljs-string">&quot;?charset=utf8&amp;loc=Asia%2FShanghai&quot;</span><br>err := orm.RegisterDataBase(<span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-string">&quot;mysql&quot;</span>, conMsg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;error: &quot;</span>, err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br>orm.RegisterModel(<span class="hljs-built_in">new</span>(User))<br>&#125;<br></code></pre></td></tr></table></figure><p>编写user.go，对应数据库中的表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>Id       <span class="hljs-keyword">int</span>    <span class="hljs-string">`orm:&quot;column(userId)&quot;`</span><br>Username <span class="hljs-keyword">string</span> <span class="hljs-string">`orm:&quot;column(userName)&quot;`</span><br>Sex      <span class="hljs-keyword">string</span> <span class="hljs-string">`orm:&quot;column(sex)&quot;`</span><br>Email    <span class="hljs-keyword">string</span> <span class="hljs-string">`orm:&quot;column(email)&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *User)</span> <span class="hljs-title">TableName</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;person&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建controller"><a href="#创建controller" class="headerlink" title="创建controller"></a>创建controller</h2><p>使用beego的orm完成简单的增删改查：</p><p>定义UserController：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> UserController <span class="hljs-keyword">struct</span> &#123;<br>   beego.Controller<br>   o orm.Ormer<br>&#125;<br></code></pre></td></tr></table></figure><p>插入方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *UserController)</span> <span class="hljs-title">InsertUser</span><span class="hljs-params">()</span></span> &#123;<br>   user := models.User&#123;&#125;<br>   user.Username = c.GetString(<span class="hljs-string">&quot;username&quot;</span>)<br>   user.Id, _ = strconv.Atoi(c.GetString(<span class="hljs-string">&quot;id&quot;</span>))<br>   user.Email = c.GetString(<span class="hljs-string">&quot;email&quot;</span>)<br>   user.Sex = c.GetString(<span class="hljs-string">&quot;sex&quot;</span>)<br>   insert, err := c.o.Insert(&amp;user)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      c.Ctx.WriteString(<span class="hljs-string">&quot;Cannot insert, err: &quot;</span> + err.Error())<br>      <span class="hljs-keyword">return</span><br>   &#125;<br>   c.Ctx.WriteString(<span class="hljs-string">&quot;insert success!, result: &quot;</span> + strconv.Itoa(<span class="hljs-keyword">int</span>(insert)))<br>&#125;<br></code></pre></td></tr></table></figure><p>删除方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *UserController)</span> <span class="hljs-title">DeleteUser</span><span class="hljs-params">()</span></span> &#123;<br>   id, _ := strconv.Atoi(c.GetString(<span class="hljs-string">&quot;id&quot;</span>))<br>   result, err := c.o.Delete(&amp;models.User&#123;Id: id&#125;)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      c.Ctx.WriteString(<span class="hljs-string">&quot;Cannot delete, err: &quot;</span> + err.Error())<br>      <span class="hljs-keyword">return</span><br>   &#125;<br>   c.Ctx.WriteString(<span class="hljs-string">&quot;delete success!, result: &quot;</span> + strconv.Itoa(<span class="hljs-keyword">int</span>(result)))<br>&#125;<br></code></pre></td></tr></table></figure><p>修改方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *UserController)</span> <span class="hljs-title">UpdateUser</span><span class="hljs-params">()</span></span> &#123;<br>   user := models.User&#123;&#125;<br>   user.Username = c.GetString(<span class="hljs-string">&quot;username&quot;</span>)<br>   user.Id, _ = strconv.Atoi(c.GetString(<span class="hljs-string">&quot;id&quot;</span>))<br>   user.Email = c.GetString(<span class="hljs-string">&quot;email&quot;</span>)<br>   user.Sex = c.GetString(<span class="hljs-string">&quot;sex&quot;</span>)<br>   update, err := c.o.Update(&amp;user)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      c.Ctx.WriteString(<span class="hljs-string">&quot;Cannot update, err: &quot;</span> + err.Error())<br>      <span class="hljs-keyword">return</span><br>   &#125;<br>   c.Ctx.WriteString(<span class="hljs-string">&quot;delete success!, result: &quot;</span> + strconv.Itoa(<span class="hljs-keyword">int</span>(update)))<br>&#125;<br></code></pre></td></tr></table></figure><p>查询单个数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *UserController)</span> <span class="hljs-title">GetUser</span><span class="hljs-params">()</span></span> &#123;<br>   id, _ := strconv.Atoi(c.GetString(<span class="hljs-string">&quot;id&quot;</span>))<br>   user := models.User&#123;Id: id&#125;<br>   err := c.o.Read(&amp;user)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      c.Ctx.WriteString(<span class="hljs-string">&quot;Cannot read, err: &quot;</span> + err.Error())<br>      <span class="hljs-keyword">return</span><br>   &#125;<br>   c.Ctx.WriteString(<span class="hljs-string">&quot;username:&quot;</span> + user.Username)<br>&#125;<br></code></pre></td></tr></table></figure><p>查询所有数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *UserController)</span> <span class="hljs-title">GetAllUsers</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-keyword">var</span> users []models.User<br>   builder, _ := orm.NewQueryBuilder(<span class="hljs-string">&quot;mysql&quot;</span>)<br>   qb := builder.Select(<span class="hljs-string">&quot;person.userId&quot;</span>, <span class="hljs-string">&quot;person.username&quot;</span>, <span class="hljs-string">&quot;person.sex&quot;</span>, <span class="hljs-string">&quot;person.email&quot;</span>).From(<span class="hljs-string">&quot;person&quot;</span>)<br>   s := qb.String()<br>   orm1 := orm.NewOrm()<br>   _, _ = orm1.Raw(s).QueryRows(&amp;users)<br>   msg := strings.Trim(fmt.Sprint(users), <span class="hljs-string">&quot;[]&quot;</span>)<br>   c.Ctx.WriteString(<span class="hljs-string">&quot;msg:&quot;</span> + msg)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在main.go中配置路由：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>   models.Init()<br>   beego.BConfig.CopyRequestBody = <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   beego.AutoRouter(&amp;controllers.UserController&#123;&#125;)<br>   beego.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p>测试获取全部数据：<a href="http://localhost:8080/user/getallusers">http://localhost:8080/user/getallusers</a></p><p>测试获取单个数据：<a href="http://localhost:8080/user/getuser?id=1">http://localhost:8080/user/getuser?id=1</a></p>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>beego</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用ONNX Runtime部署模型至Java语言平台</title>
    <link href="/2022/04/05/%E4%BD%BF%E7%94%A8onnx%E9%83%A8%E7%BD%B2%E6%A8%A1%E5%9E%8B%E8%87%B3Java%E8%AF%AD%E8%A8%80%E5%B9%B3%E5%8F%B0/"/>
    <url>/2022/04/05/%E4%BD%BF%E7%94%A8onnx%E9%83%A8%E7%BD%B2%E6%A8%A1%E5%9E%8B%E8%87%B3Java%E8%AF%AD%E8%A8%80%E5%B9%B3%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="使用ONNX-Runtime部署模型至Java语言平台"><a href="#使用ONNX-Runtime部署模型至Java语言平台" class="headerlink" title="使用ONNX Runtime部署模型至Java语言平台"></a>使用ONNX Runtime部署模型至Java语言平台</h1><h2 id="什么是ONNX-Runtime"><a href="#什么是ONNX-Runtime" class="headerlink" title="什么是ONNX Runtime"></a>什么是ONNX Runtime</h2><p>在<a href="https://onnxruntime.ai/">ONNX官网</a>上关于ONNX的介绍，ONNX Runtime 是机器学习模型的加速器，具有多平台支持和与硬件特定库集成的灵活接口。ONNX 运行时可与来自 PyTorch、Tensorflow/Keras、TFLite、scikit-learn 和其他框架的模型一起使用。简单来说，由于有着不同的机器学习框架，模型的部署需要考虑框架因素，变得相当复杂，而ONNX Runtime相当于一层中间件，可以将不同框架的模型导出为ONNX格式，这样就可以使用ONNX提供的接口，进而在全平台，多种编程语言下运行模型。</p><h2 id="onnx模型打包"><a href="#onnx模型打包" class="headerlink" title="onnx模型打包"></a>onnx模型打包</h2><p>以pytorch为例，首先需要安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在CPU平台或者MAC上运行执行如下命令</span><br>pip install onnxruntime<br><span class="hljs-meta">#</span><span class="bash"> 使用GPU则执行如下命令</span><br>pip install onnxruntime-gpu<br></code></pre></td></tr></table></figure><p>导出模型需要安装ONNX，如果使用了pytorch，则无需安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> tensorflow</span><br>pip install tf2onnx<br><span class="hljs-meta">#</span><span class="bash"> sklearn</span><br>pip install skl2onnx<br></code></pre></td></tr></table></figure><p>导出onnx模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_to_onnx</span>(<span class="hljs-params">model, save_path, data</span>):</span><br>    model.<span class="hljs-built_in">eval</span>()<br>    input_names = [<span class="hljs-string">&quot;input&quot;</span>]<br>    output_names = [<span class="hljs-string">&quot;out&quot;</span>]<br>    torch.onnx.export(model, data, save_path, input_names=input_names, opset_version=<span class="hljs-number">11</span>, output_names=output_names)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;save to onnx finished.&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>此方法的参数含义分别为：</p><ul><li>model：实例化后的模型。</li><li>save_path：onnx模型存储路径。</li><li>符合模型输入的单条或者多条数据。</li></ul><h2 id="onnx模型部署"><a href="#onnx模型部署" class="headerlink" title="onnx模型部署"></a>onnx模型部署</h2><p>一般的模型部署通过flask框架进行，但flask远没有Java的生态丰富。Java在web以及大数据领域非常流行，训练好的模型如果可以通过Java调用，无疑对模型应用有着很大帮助。接下来我们使用Java来调用导出的onnx模型。</p><p>首先使用maven构建项目（推荐使用idea，开发神器），在创建好的项目的pom文件引入onnx依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.microsoft.onnxruntime<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>onnxruntime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.11.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建ONNXDemo类，读取模型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ai.onnxruntime.*;<br><br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ONNXDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">float</span>[][][][] img_arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>][<span class="hljs-number">500</span>][<span class="hljs-number">500</span>];<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            testONNX(img_arr);<br>        &#125; <span class="hljs-keyword">catch</span> (OrtException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testONNX</span><span class="hljs-params">(<span class="hljs-keyword">float</span>[][][][] img_arr)</span> <span class="hljs-keyword">throws</span> OrtException </span>&#123;<br>        OrtEnvironment env = OrtEnvironment.getEnvironment();<br>        OrtSession session = env.createSession(<span class="hljs-string">&quot;onnx_path&quot;</span>);<br>        Map&lt;String, NodeInfo&gt; info = session.getInputInfo();<br>        NodeInfo next = info.values().iterator().next();<br>        OnnxTensor tensor = OnnxTensor.createTensor(env, img_arr);<br>        OrtSession.Result result = session.run(Collections.singletonMap(next.getName(), tensor));<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输入符合模型输入的单条或者多条数据即可得到模型推理结果。</p>]]></content>
    
    
    <categories>
      
      <category>DL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>onnx</tag>
      
      <tag>模型部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式（三）</title>
    <link href="/2022/03/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2022/03/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式（三）"><a href="#设计模式（三）" class="headerlink" title="设计模式（三）"></a>设计模式（三）</h1><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>原型模式指的是使用原型实例指定创建对象的种类，通过拷贝这些原型，创建新的对象，在Java中，使类实现接口Cloneable来使类具有克隆能力。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrototypeMode</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Test tom = <span class="hljs-keyword">new</span> Test(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Tom&quot;</span>);<br>        Test jerry = <span class="hljs-keyword">new</span> Test(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Jerry&quot;</span>);<br>        tom.setObj(jerry);<br>        Test clone1 = (Test) tom.clone();<br>        Test clone2 = (Test) tom.clone();<br>        Test clone3 = (Test) tom.clone();<br>        System.out.println(clone1);<br>        System.out.println(clone2);<br>        System.out.println(clone3);<br>        System.out.println(clone1.getObj());<br>        System.out.println(clone2.getObj());<br>        System.out.println(clone3.getObj());<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Test obj;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setObj</span><span class="hljs-params">(Test obj)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.obj = obj;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Test <span class="hljs-title">getObj</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Test&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>&#123;<br>        Test test = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            test = (Test)<span class="hljs-keyword">super</span>.clone();<br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> test;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>浅拷贝与深拷贝</strong></p><p>对于基本数据类型，浅拷贝会直接进行值传递，对于引用数据类型，浅拷贝会将此变量的地址复制一份给新对象。要实现深拷贝，可以重新clone方法或者使用对象序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObj1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span>, <span class="hljs-title">Cloneable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionID = <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TestObj1</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.clone();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObj2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span>, <span class="hljs-title">Cloneable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> TestObj1 obj1;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TestObj2</span><span class="hljs-params">(String name, TestObj1 obj1)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.obj1 = obj1;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TestObj1 <span class="hljs-title">getObj1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> obj1;<br>    &#125;<br><br>    <span class="hljs-comment">// 方式一: 重写clone方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        TestObj2 obj2 = (TestObj2) <span class="hljs-keyword">super</span>.clone();<br>        obj2.obj1 = (TestObj1) obj1.clone();<br>        <span class="hljs-keyword">return</span> obj2;<br>    &#125;<br><br>    <span class="hljs-comment">// 方式二: 对象序列化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TestObj2 <span class="hljs-title">deepCopy</span><span class="hljs-params">()</span> </span>&#123;<br>        ByteArrayOutputStream bos = <span class="hljs-keyword">null</span>;<br>        ObjectOutputStream oos = <span class="hljs-keyword">null</span>;<br>        ByteArrayInputStream bis = <span class="hljs-keyword">null</span>;<br>        ObjectInputStream ois = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>            oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);<br>            oos.writeObject(<span class="hljs-keyword">this</span>);<br>            bis = <span class="hljs-keyword">new</span> ByteArrayInputStream(bos.toByteArray());<br>            ois = <span class="hljs-keyword">new</span> ObjectInputStream(bis);<br>            <span class="hljs-keyword">return</span> (TestObj2)ois.readObject();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">assert</span> bis != <span class="hljs-keyword">null</span>;<br>                bis.close();<br>                <span class="hljs-keyword">assert</span> ois != <span class="hljs-keyword">null</span>;<br>                ois.close();<br>                oos.close();<br>                bos.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>当一个类的构造函数参数个数超过4个，而且这些参数有些是可选的参数，考虑使用构造者模式。</p><p><strong>简化代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuilderMode</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Man man = <span class="hljs-keyword">new</span> Man.Builds(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;tom&quot;</span>)<br>                .setAge(<span class="hljs-number">12</span>)<br>                .setDepartment(<span class="hljs-string">&quot;SH&quot;</span>)<br>                .build();<br>        System.out.println(man);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Man</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String department;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Man</span> <span class="hljs-params">(Builds builds)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = builds.id;<br>        <span class="hljs-keyword">this</span>.name = builds.name;<br>        <span class="hljs-keyword">this</span>.age = builds.age;<br>        <span class="hljs-keyword">this</span>.department = builds.department;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Man&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, department=&#x27;&quot;</span> + department + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Builds</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> id;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>        <span class="hljs-keyword">private</span> String department;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Builds</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.id = id;<br>            <span class="hljs-keyword">this</span>.name = name;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Builds <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.age = age;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Builds <span class="hljs-title">setDepartment</span><span class="hljs-params">(String department)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.department = department;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Man <span class="hljs-title">build</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Man(<span class="hljs-keyword">this</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>经典代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuilderMode</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Director director = <span class="hljs-keyword">new</span> Director();<br>        NewMan newMan = <span class="hljs-keyword">new</span> NewMan(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;tom&quot;</span>);<br>        director.getMan(newMan);<br>        Man man = newMan.getMan();<br>        System.out.println(man);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Man</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String department;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Man</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDepartment</span><span class="hljs-params">(String department)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.department = department;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Man&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, department=&#x27;&quot;</span> + department + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ManBuilder</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDepartment</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Man <span class="hljs-title">getMan</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewMan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ManBuilder</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Man man;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NewMan</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.man = <span class="hljs-keyword">new</span> Man(id, name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">()</span> </span>&#123;<br>        man.setAge(<span class="hljs-number">22</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDepartment</span><span class="hljs-params">()</span> </span>&#123;<br>        man.setDepartment(<span class="hljs-string">&quot;SH&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Man <span class="hljs-title">getMan</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.man;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Director</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getMan</span><span class="hljs-params">(ManBuilder builder)</span> </span>&#123;<br>        builder.setAge();<br>        builder.setDepartment();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式（二）</title>
    <link href="/2022/03/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/03/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式（二）"><a href="#设计模式（二）" class="headerlink" title="设计模式（二）"></a>设计模式（二）</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>当需要频繁地创建与销毁对象，或者创建对象消耗的资源过多，可以使用单例模式。</p><p><strong>饿汉式（静态常量）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-comment">// 阻止外部new Singleton对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">// 创建静态Singleton实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton singleton = <span class="hljs-keyword">new</span> Singleton();<br><br>    <span class="hljs-comment">// 暴露静态方法，提供静态对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getSingleton</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此方法在类装载时就创建了实例，避免了线程安全问题，但可能造成内存浪费。</p><p><strong>饿汉式（静态代码块）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-comment">// 阻止外部new Singleton对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125; <br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton singleton;<br>    <br>    <span class="hljs-keyword">static</span> &#123;<br>        singleton = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br><br>    <span class="hljs-comment">// 暴露静态方法，提供静态对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getSingleton</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>懒汉式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lazy</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Lazy lazy;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Lazy</span><span class="hljs-params">()</span> </span>&#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Lazy <span class="hljs-title">getLazy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (lazy == <span class="hljs-keyword">null</span>) &#123;<br>            lazy = <span class="hljs-keyword">new</span> Lazy();<br>        &#125;<br>        <span class="hljs-keyword">return</span> lazy;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述方法可以避免内存浪费，但线程不安全。</p><p><strong>懒汉式（线程安全）</strong></p><p>方式一：效率低下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lazy</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Lazy lazy;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Lazy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Lazy <span class="hljs-title">getLazy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (lazy == <span class="hljs-keyword">null</span>) &#123;<br>            lazy = <span class="hljs-keyword">new</span> Lazy();<br>        &#125;<br>        <span class="hljs-keyword">return</span> lazy;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方式二：效率不高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lazy</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Lazy lazy;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Lazy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Lazy <span class="hljs-title">getLazy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (lazy == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span>(Lazy.class) &#123;<br>                lazy = <span class="hljs-keyword">new</span> Lazy();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> lazy;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方式三：最优选择</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lazy</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Lazy lazy;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Lazy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Lazy <span class="hljs-title">getLazy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (lazy == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span>(Lazy.class) &#123;<br>                lazy = <span class="hljs-keyword">new</span> Lazy();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> lazy;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>静态内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 静态内部类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">StaticClass</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProvideInstance</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> StaticClass instance = <span class="hljs-keyword">new</span> StaticClass();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> StaticClass <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ProvideInstance.instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此方式避免了线程安全问题，又具有延迟加载的特性。</p><p><strong>使用枚举类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonPattern</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Instance instance = Instance.INSTANCE;<br>        instance.doSth();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 枚举类</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Instance</span> </span>&#123;<br>    INSTANCE;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSth</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Complete!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>避免线程安全问题，防止反序列化重新创建新的对象。</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p><strong>简单工厂模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryPattern</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Factory.objFactory(<span class="hljs-string">&quot;A&quot;</span>).doS();<br>        Factory.objFactory(<span class="hljs-string">&quot;B&quot;</span>).doS();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Obj</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doS</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Obj</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doS</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Obj</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doS</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Obj <span class="hljs-title">objFactory</span><span class="hljs-params">(String param)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (param.equals(<span class="hljs-string">&quot;A&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> A();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (param.equals(<span class="hljs-string">&quot;B&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> B();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单工厂模式在一定程度上违反了开闭原则，但在简单情况下仍可以使用。</p><p><strong>工厂方法模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryPattern</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Factory factory;<br>        factory = <span class="hljs-keyword">new</span> FactoryA();<br>        factory.makeProduct().useProduct();<br>        factory = <span class="hljs-keyword">new</span> FactoryB();<br>        factory.makeProduct().useProduct();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useProduct</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-comment">// 抽象工厂类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Product <span class="hljs-title">makeProduct</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-comment">// 具体产品a</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Product</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useProduct</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Using product A...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 具体产品B</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Product</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">useProduct</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Using product B...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 具体工厂A</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Factory</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Product <span class="hljs-title">makeProduct</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Making product A...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ProductA();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体工厂B</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Factory</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Product <span class="hljs-title">makeProduct</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Making product B...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ProductB();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>工厂模式将对象的实例化推迟至子类实现。</p><p><strong>抽象工厂模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Here is User A!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Here is User B!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CreateUser</span> </span>&#123;<br>    <span class="hljs-function">User <span class="hljs-title">createUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserA1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CreateUser</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">createUser</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserA();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserB1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CreateUser</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">createUser</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserB();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>抽象工厂模式可以结合简单工厂模式与工厂方法模式，抽象工厂模式将工厂分成抽象工厂与具体工厂两层，可以根据实际情况灵活切换想要使用的工厂方法。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式（一）</title>
    <link href="/2022/03/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/03/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式（一）"><a href="#设计模式（一）" class="headerlink" title="设计模式（一）"></a>设计模式（一）</h1><h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h2><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p><h2 id="设计模式常用原则"><a href="#设计模式常用原则" class="headerlink" title="设计模式常用原则"></a>设计模式常用原则</h2><h3 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h3><p>一个类只应具有一项职责。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleTask</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Animal animal = <span class="hljs-keyword">new</span> Animal();<br>        animal.sound(<span class="hljs-string">&quot;dog&quot;</span>);<br>        animal.sound(<span class="hljs-string">&quot;cat&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-comment">// 违反单一职责原则，不同的动物叫声不同。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sound</span><span class="hljs-params">(String animal)</span> </span>&#123;<br>        System.out.println(animal + <span class="hljs-string">&quot; is shouting!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改进：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-comment">// 在方法级别遵循单一职责原则</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">catSound</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat is shouting!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dogSound</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Dog is shouting!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h3><p>一个类对另一个类的依赖应当建立在最小接口上，不要让类实现其不需要的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Interface0</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun3</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interface0</span> </span>&#123;<br>    <span class="hljs-comment">// 假定A只需要fun1，那么A就必须实现其不需要的fun2，fun3</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span> </span>&#123;<br>        <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun3</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改进：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Interface0</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Interface0</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun3</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interface0</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span> </span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="依赖倒转"><a href="#依赖倒转" class="headerlink" title="依赖倒转"></a>依赖倒转</h3><p>相对于细节的多变，抽象更加稳定，以抽象为基础搭建的架构更加稳定，在Java中，这种形式表现为<strong>面向接口编程</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyInversion</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ObjA a = <span class="hljs-keyword">new</span> ObjA();<br>        ObjB b = <span class="hljs-keyword">new</span> ObjB();<br>        Operator operator = <span class="hljs-keyword">new</span> Operator();<br>        operator.operate(a);<br>        operator.operate(b);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Operator</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operate</span> <span class="hljs-params">(TestObj obj)</span> </span>&#123;<br>        obj.doSth();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TestObj</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doSth</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">TestObj</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSth</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;objA is doing sth.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">TestObj</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSth</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;objB is doing sth.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>依赖传递</strong></p><p>接口传递：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Mobile</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mobileRun</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-comment">// 要实现Person，必须实现Mobile</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">playMobile</span><span class="hljs-params">(Mobile mobile)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>构造方法传递：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Mobile</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mobileRun</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">playMobile</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tom</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Mobile mobile;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">playMobile</span><span class="hljs-params">(Mobile mobile)</span> </span>&#123;<br>        mobile = mobile;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Setter方法传递：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Mobile</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mobileRun</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">playMobile</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tom</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Mobile mobile;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMobile</span><span class="hljs-params">(Mobile mobile)</span> </span>&#123;<br>        mobile = mobile;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="里氏替换"><a href="#里氏替换" class="headerlink" title="里氏替换"></a>里氏替换</h3><p>类的继承降低了程序的可移植性，使对象间的耦合性增加。为了避免修改父类导致子类不可用，继承时子类不要试图重写父类方法，如果实在需要重写，从子类与父类抽象出一个Base类，让子类与父类都继承此Base类，使用聚合，组合，依赖关系处理子类与父类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> </span>&#123;<br>    <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A fun1&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span> </span>&#123;<br>    A1 a1 = <span class="hljs-keyword">new</span> A1();<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B fun1&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span> </span>&#123;<br>        a1.fun1();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>程序对修改关闭，对扩展开放。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Subject</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> subject_type;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">learn</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LearnSubject</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ls</span><span class="hljs-params">(Subject s)</span> </span>&#123;<br>        s.learn();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Math</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Subject</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Math</span><span class="hljs-params">()</span> </span>&#123;<br>        subject_type = <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">learn</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;learning math&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Java</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Subject</span> </span>&#123;<br>    <span class="hljs-comment">// 想要拓展程序只需继承Subject</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Java</span><span class="hljs-params">()</span> </span>&#123;<br>        subject_type = <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">learn</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;learning java&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Demeter原则"><a href="#Demeter原则" class="headerlink" title="Demeter原则"></a>Demeter原则</h3><p>一个类对自己所依赖的类知道的越少越好，被依赖的类需要将逻辑封装在类的内部，对外只暴露public方法。两个类之间有耦合关系，包括依赖，关联，聚合等，其中一个类最好不要在另外一个类的局部变量里出现。</p><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p>尽量不要使用继承，这会增加类之间的耦合，可以将其改为聚合，合成方式。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode练习（一）</title>
    <link href="/2022/03/05/leetcode%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/03/05/leetcode%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode练习（一）"><a href="#leetcode练习（一）" class="headerlink" title="leetcode练习（一）"></a>leetcode练习（一）</h1><h2 id="Q34"><a href="#Q34" class="headerlink" title="Q34"></a>Q34</h2><p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。如果数组中不存在目标值 target，返回 [-1, -1]。<br>进阶：你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array">https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array</a></p><p><strong>题解（Java）:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] searchRange(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-keyword">int</span> m = l + (r - l) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[m] &lt; target) &#123;<br>                l = m + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[m] &gt; target) &#123;<br>                r = m - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">while</span> (nums[l] != target) &#123;<br>                    l++;<br>                &#125;<br>                <span class="hljs-keyword">while</span> (nums[r] != target) &#123;<br>                    r--;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;l, r&#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="Q35"><a href="#Q35" class="headerlink" title="Q35"></a>Q35</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。请必须使用时间复杂度为 O(log n) 的算法。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/search-insert-position">https://leetcode-cn.com/problems/search-insert-position</a></p><p><strong>题解（Java）:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> mid;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            mid = left + (right - left) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br><span class="hljs-comment">//        left &lt;= right 意味着退出循环时 left = right + 1</span><br>        <span class="hljs-keyword">return</span> right + <span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="Q704"><a href="#Q704" class="headerlink" title="Q704"></a>Q704</h2><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-search">https://leetcode-cn.com/problems/binary-search</a></p><p><strong>题解（Java）:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = nums.length - <span class="hljs-number">1</span>;<br><span class="hljs-comment">//        while中条件为left &lt;= right时，注意right = mid - 1，因为mid一定不是目标值。</span><br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法（九）</title>
    <link href="/2022/02/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B9%9D%EF%BC%89/"/>
    <url>/2022/02/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法（九）"><a href="#数据结构与算法（九）" class="headerlink" title="数据结构与算法（九）"></a>数据结构与算法（九）</h1><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>贪心算法的思想是在面对问题时，总是选择在目前看来的最优解，这样，即使最后的结果不是全局最优，也不会太差。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GreedyAlgorithm</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 初始化数据</span><br>        HashMap&lt;String, HashSet&lt;String&gt;&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        HashSet&lt;String&gt; set1 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        HashSet&lt;String&gt; set2 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        HashSet&lt;String&gt; set3 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        HashSet&lt;String&gt; set4 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        HashSet&lt;String&gt; set5 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        set1.add(<span class="hljs-string">&quot;A&quot;</span>);<br>        set1.add(<span class="hljs-string">&quot;B&quot;</span>);<br>        set1.add(<span class="hljs-string">&quot;C&quot;</span>);<br>        set2.add(<span class="hljs-string">&quot;D&quot;</span>);<br>        set2.add(<span class="hljs-string">&quot;A&quot;</span>);<br>        set2.add(<span class="hljs-string">&quot;E&quot;</span>);<br>        set3.add(<span class="hljs-string">&quot;F&quot;</span>);<br>        set3.add(<span class="hljs-string">&quot;B&quot;</span>);<br>        set3.add(<span class="hljs-string">&quot;G&quot;</span>);<br>        set4.add(<span class="hljs-string">&quot;B&quot;</span>);<br>        set4.add(<span class="hljs-string">&quot;C&quot;</span>);<br>        set5.add(<span class="hljs-string">&quot;G&quot;</span>);<br>        set5.add(<span class="hljs-string">&quot;H&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;k1&quot;</span>, set1);<br>        map.put(<span class="hljs-string">&quot;k2&quot;</span>, set2);<br>        map.put(<span class="hljs-string">&quot;k3&quot;</span>, set3);<br>        map.put(<span class="hljs-string">&quot;k4&quot;</span>, set4);<br>        map.put(<span class="hljs-string">&quot;k5&quot;</span>, set5);<br>        HashSet&lt;String&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        set.add(<span class="hljs-string">&quot;A&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;B&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;C&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;D&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;E&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;F&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;G&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;H&quot;</span>);<br><br>        HashSet&lt;String&gt; temp_set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-keyword">int</span> max_len = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 贪心算法</span><br>        <span class="hljs-keyword">for</span> (String key: map.keySet()) &#123;<br>            HashSet&lt;String&gt; ele_set = map.get(key);<br>            ele_set.retainAll(set);<br>            <span class="hljs-keyword">if</span> (max_len &lt; ele_set.size()) &#123;<br>                set.removeAll(ele_set);<br>                temp_set.add(key);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (set.size() &lt;= <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (String s : temp_set) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><p>KMP算法用于查找字符串中是否有指定的字串，KMP算法维护了一个next数组，这使得它不必与暴力匹配一样每次都重新开始匹配，而是利用之前匹配的信息，减少匹配工作量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KMPAlgorithm</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(get_pos_via_kmp(<span class="hljs-string">&quot;AAABCDABABD&quot;</span>, <span class="hljs-string">&quot;AAA&quot;</span>));<br>    &#125;<br>    <span class="hljs-comment">// 进行KMP匹配</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_pos_via_kmp</span><span class="hljs-params">(String str, String pattern)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] next_arr = get_next_arr(pattern);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br>            <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; str.charAt(i) != pattern.charAt(j)) &#123;<br>                j = next_arr[j];<br>            &#125;<br>            <span class="hljs-keyword">while</span> (j &lt; pattern.length() &amp;&amp; str.charAt(i) == pattern.charAt(j)) &#123;<br>                i++;<br>                j++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (j == pattern.length()) &#123;<br>                <span class="hljs-keyword">return</span> i - j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">// 生成next数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] get_next_arr(String str) &#123;<br>        <span class="hljs-keyword">int</span>[] next_arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[str.length()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; str.length(); i++) &#123;<br>            next_arr[i] = get_equal_len(str.substring(<span class="hljs-number">0</span>, i));<br>        &#125;<br>        next_arr[<span class="hljs-number">0</span>] = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> next_arr;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取字符串相等前后缀的最大长度</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_equal_len</span><span class="hljs-params">(String str)</span> </span>&#123;<br>        String[] prefix = <span class="hljs-keyword">new</span> String[str.length() - <span class="hljs-number">1</span>];<br>        String[] suffix = <span class="hljs-keyword">new</span> String[str.length() - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> max_len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = suffix.length; i &lt; str.length(); i++, j--) &#123;<br>            prefix[i - <span class="hljs-number">1</span>] = str.substring(<span class="hljs-number">0</span>, i);<br>            suffix[i - <span class="hljs-number">1</span>] = str.substring(j);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; prefix.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (prefix[i].equals(suffix[i])) &#123;<br>                max_len = i + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max_len;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h2><p>Prim算法用于解决最小生成树问题，最小生成树是指给定一个带权无向图，选取一个路径，联通所有顶点，同时使所有路径权重之和最小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrimAlgorithm</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Graph graph = <span class="hljs-keyword">new</span> Graph(<span class="hljs-number">7</span>);<br>        graph.node_list = <span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>&#125;;<br>        graph.graph_arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][] &#123;<br>                &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">2</span>&#125;,<br>                &#123;<span class="hljs-number">5</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">3</span>&#125;,<br>                &#123;<span class="hljs-number">7</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>&#125;,<br>                &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10000</span>&#125;,<br>                &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>&#125;,<br>                &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">6</span>&#125;,<br>                &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10000</span>&#125;<br>        &#125;;<br>        MinTree minTree = <span class="hljs-keyword">new</span> MinTree(<span class="hljs-number">7</span>, graph);<br>        minTree.primAlgorithm(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinTree</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> count;<br>    Graph graph;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MinTree</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> counts, Graph graphs)</span> </span>&#123;<br>        count = counts;<br>        graph = graphs;<br>    &#125;<br><br>    <span class="hljs-comment">// prim algorithm</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">primAlgorithm</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start_node)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] visited_list = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[count];<br>        visited_list[start_node] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> point1 = <span class="hljs-number">0</span>, point2 = <span class="hljs-number">0</span>, min = <span class="hljs-number">10000</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; visited_list.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; visited_list.length; j++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; visited_list.length; k++) &#123;<br>                    <span class="hljs-keyword">if</span> (visited_list[j] == <span class="hljs-number">1</span> &amp;&amp; visited_list[k] == <span class="hljs-number">0</span> &amp;&amp; graph.graph_arr[j][k] &lt; min) &#123;<br>                        point1 = j;<br>                        point2 = k;<br>                        min = graph.graph_arr[j][k];<br>                    &#125;<br>                &#125;<br>            &#125;<br>            visited_list[point2] = <span class="hljs-number">1</span>;<br>            System.out.println(graph.node_list[point1] + <span class="hljs-string">&quot;-&gt;&quot;</span> + graph.node_list[point2]);<br>            min = <span class="hljs-number">10000</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Graph</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> node_count;<br>    String[] node_list;<br>    <span class="hljs-keyword">int</span>[][] graph_arr;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Graph</span><span class="hljs-params">(<span class="hljs-keyword">int</span> count)</span> </span>&#123;<br>        node_count = count;<br>        node_list = <span class="hljs-keyword">new</span> String[count];<br>        graph_arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[count][count];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h2><p>Kruskal算法用于解决在加权有向图中从一个节点到另一个节点的最小距离。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KruskalAlgorithm</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String[] list = <span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>&#125;;<br>        <span class="hljs-keyword">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][] &#123;<br>                &#123;<span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">16</span>, <span class="hljs-number">14</span>&#125;,<br>                &#123;<span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10000</span>&#125;,<br>                &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10000</span>&#125;,<br>                &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>&#125;,<br>                &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>&#125;,<br>                &#123;<span class="hljs-number">16</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>&#125;,<br>                &#123;<span class="hljs-number">14</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>&#125;<br>        &#125;;<br>        Kruskal kruskal = <span class="hljs-keyword">new</span> Kruskal(<span class="hljs-number">7</span>, list, arr);<br>        kruskal.kruskal();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Kruskal</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> edge_count;<br>    String[] node_list;<br>    <span class="hljs-keyword">int</span>[][] graph_arr;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Kruskal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num, String[] list, <span class="hljs-keyword">int</span>[][] arr)</span> </span>&#123;<br>        node_list = <span class="hljs-keyword">new</span> String[num];<br>        graph_arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[num][num];<br>        System.arraycopy(list, <span class="hljs-number">0</span>, node_list, <span class="hljs-number">0</span>, num);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.arraycopy(arr[i], <span class="hljs-number">0</span>, graph_arr[i], <span class="hljs-number">0</span>, arr[<span class="hljs-number">0</span>].length);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; num; j++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[i][j] &lt; <span class="hljs-number">10000</span>) &#123;<br>                    edge_count++;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Kruskal算法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span>[] ends = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[node_list.length];<br>        EdgeInfo[] edges = get_edge_info();<br>        EdgeInfo[] arr = <span class="hljs-keyword">new</span> EdgeInfo[edge_count];<br>        sort_edge_by_w(edges);<br>        <span class="hljs-keyword">for</span> (EdgeInfo edge : edges) &#123;<br>            <span class="hljs-keyword">int</span> start = get_idx(edge.start);<br>            <span class="hljs-keyword">int</span> end = get_idx(edge.end);<br>            <span class="hljs-keyword">int</span> m = get_end(ends, start);<br>            <span class="hljs-keyword">int</span> n = get_end(ends, end);<br>            <span class="hljs-keyword">if</span> (m != n) &#123;<br>                ends[m] = n;<br>                arr[index] = edge;<br>                index++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 按照边的权重进行排序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort_edge_by_w</span><span class="hljs-params">(EdgeInfo[] edge_list)</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        EdgeInfo temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; edge_list.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; edge_list.length - <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (edge_list[j].weight &gt; edge_list[j + <span class="hljs-number">1</span>].weight) &#123;<br>                    temp = edge_list[j];<br>                    edge_list[j]= edge_list[j + <span class="hljs-number">1</span>];<br>                    edge_list[j + <span class="hljs-number">1</span>] = temp;<br>                    flag = <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            flag = <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回顶点对应的下标</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_idx</span><span class="hljs-params">(String aim)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; node_list.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (aim.equals(node_list[i])) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取边的信息</span><br>    <span class="hljs-keyword">public</span> EdgeInfo[] get_edge_info() &#123;<br>        EdgeInfo[] edgeInfos = <span class="hljs-keyword">new</span> EdgeInfo[edge_count];<br>        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; node_list.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; node_list.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (graph_arr[i][j] &lt; <span class="hljs-number">10000</span>) &#123;<br>                    edgeInfos[index] = <span class="hljs-keyword">new</span> EdgeInfo(node_list[i], node_list[j], graph_arr[i][j]);<br>                    index++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> edgeInfos;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取下标为i的顶点的终点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_end</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] end, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (end[i] != <span class="hljs-number">0</span>) &#123;<br>            i = end[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EdgeInfo</span> </span>&#123;<br>    String start;<br>    String end;<br>    <span class="hljs-keyword">int</span> weight;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">EdgeInfo</span><span class="hljs-params">(String s, String e, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>        start = s;<br>        end = e;<br>        weight = w;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;EdgeInfo&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;start=&quot;</span> + start +<br>                <span class="hljs-string">&quot;, end=&quot;</span> + end +<br>                <span class="hljs-string">&quot;, weight=&quot;</span> + weight +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><p>Dijkstra算法同样用于解决在加权有向图中从一个节点到另一个节点的最小距离，但它用到了广度优先搜索的思想。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dijkstra</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span>[] vertex = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> n = <span class="hljs-number">65535</span>;<br>        <span class="hljs-keyword">int</span>[][] matrix = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][] &#123;<br>                &#123;n, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, n, n, n, <span class="hljs-number">2</span>&#125;,<br>                &#123;<span class="hljs-number">5</span>, n, n, <span class="hljs-number">9</span>, n, n, <span class="hljs-number">3</span>&#125;,<br>                &#123;<span class="hljs-number">7</span>, n, n, n, <span class="hljs-number">8</span>, n, n&#125;,<br>                &#123;n, <span class="hljs-number">9</span>, n, n, n, <span class="hljs-number">4</span>, n&#125;,<br>                &#123;n, n, <span class="hljs-number">8</span>, n, n, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>&#125;,<br>                &#123;n, n, n, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, n, <span class="hljs-number">6</span>&#125;,<br>                &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, n, n, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, n&#125;<br>        &#125;;<br>        Graphs graphs = <span class="hljs-keyword">new</span> Graphs(vertex, matrix);<br>        graphs.dijkstra(<span class="hljs-number">2</span>);<br>        graphs.showDijkstra();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Graphs</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span>[] vertex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[][] matrix;<br>    <span class="hljs-keyword">private</span> VisitedSet vv;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Graphs</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] vertex, <span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.vertex = vertex;<br>        <span class="hljs-keyword">this</span>.matrix = matrix;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showDijkstra</span><span class="hljs-params">()</span> </span>&#123;<br>        vv.show();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; matrix[index].length; i++) &#123;<br>            len = vv.getDis(index) + matrix[index][i];<br>            <span class="hljs-keyword">if</span> (!vv.in(i) &amp;&amp; len &lt; vv.getDis(i)) &#123;<br>                vv.updatePre(i, index);<br>                vv.updateDis(i, len);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        vv = <span class="hljs-keyword">new</span> VisitedSet(vertex.length, index);<br>        update(index);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vertex.length; i++) &#123;<br>            index = vv.updateArr();<br>            update(index);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VisitedSet</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] already_arr;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] pre_visited;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] dis;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">VisitedSet</span><span class="hljs-params">(<span class="hljs-keyword">int</span> length, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.already_arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];<br>        <span class="hljs-keyword">this</span>.pre_visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];<br>        <span class="hljs-keyword">this</span>.dis = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];<br>        Arrays.fill(dis, <span class="hljs-number">65535</span>);<br>        <span class="hljs-keyword">this</span>.already_arr[index] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">this</span>.dis[index] = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">in</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> already_arr[index] == <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateDis</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>        dis[index] = len;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updatePre</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pre, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        pre_visited[pre] = index;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getDis</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> dis[index];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateArr</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> min = <span class="hljs-number">65535</span>, index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; already_arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (already_arr[i] == <span class="hljs-number">0</span> &amp;&amp; dis[i] &lt;min) &#123;<br>                min = dis[i];<br>                index = i;<br>            &#125;<br>        &#125;<br>        already_arr[index] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">char</span>[] vertex = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : dis) &#123;<br>            <span class="hljs-keyword">if</span> (i != <span class="hljs-number">65535</span>) &#123;<br>                System.out.print(vertex[count] + <span class="hljs-string">&quot;(&quot;</span> + i + <span class="hljs-string">&quot;)&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;N &quot;</span>);<br>            &#125;<br>            count++;<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="The-end-of-series"><a href="#The-end-of-series" class="headerlink" title="The end of series"></a>The end of series</h2><p>这是数据结构与算法系列的最后一篇。这一段时间陆陆续续又重新复习了一遍数据结构与算法，感觉还是有一点收获与进步的。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法（八）</title>
    <link href="/2022/02/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E5%85%AB%EF%BC%89/"/>
    <url>/2022/02/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法（八）"><a href="#数据结构与算法（八）" class="headerlink" title="数据结构与算法（八）"></a>数据结构与算法（八）</h1><h2 id="二分查找（非递归）"><a href="#二分查找（非递归）" class="headerlink" title="二分查找（非递归）"></a>二分查找（非递归）</h2><p>使用非递归方法实现二分查找，关键在于不断更新左右指针的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySearch</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">23</span>, <span class="hljs-number">45</span>&#125;;<br>        System.out.println(binarySearch(array, <span class="hljs-number">12</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用非递归方式实现二分查找</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> array 待查找的数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i 待查找的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 待查找的值在数组中的下标</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = array.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-keyword">if</span> (array[mid] == i) &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (array[mid] &gt; i)&#123;<br>                right = mid;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                left = mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h2><p>分治的思想在于将一个大问题不断分解，直至分解成的小问题可以直接被解决。以下代码使用分治思想解决汉诺塔问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DivideAndConquer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        hanoiTower(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用分治算法解决汉诺塔问题</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> count 要移动到目标柱的盘的数目</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> start 盘开始移动的柱子的位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mid 盘移向目标柱子的过渡柱子</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> aim 盘要移向的目标柱子</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hanoiTower</span><span class="hljs-params">(<span class="hljs-keyword">int</span> count, String start, String mid, String aim)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (count == <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;from &quot;</span> + start + <span class="hljs-string">&quot; to &quot;</span> + aim);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 要把所有的盘移动到目标柱，则需要把上面count - 1个盘移到过渡柱，再把最下面的盘移到目标柱， 最后把上面count - 1个盘移到目标柱</span><br>        hanoiTower(count - <span class="hljs-number">1</span>, start, aim, mid);<br>        System.out.println(<span class="hljs-string">&quot;from &quot;</span> + start + <span class="hljs-string">&quot; to &quot;</span> + aim);<br>        hanoiTower(count - <span class="hljs-number">1</span>, mid, start, aim);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>动态规划类似于分治算法，都是把一个大问题分成多个小问题，但动态规划每个小问题的解都依赖前面小问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicProgram</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] weight_ = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-keyword">int</span>[] value_ = &#123;<span class="hljs-number">1500</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">2000</span>&#125;;<br>        <span class="hljs-keyword">int</span> obj_count = <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">int</span> capacity = <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">int</span>[][] package_ = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[obj_count + <span class="hljs-number">1</span>][capacity + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span>[][] path_  = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[obj_count + <span class="hljs-number">1</span>][capacity + <span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//        思路分析：动态规划类似于分治算法，都是把一个大问题分成多个小问题，但动态规划每个小问题的解都依赖前面小问题。</span><br><span class="hljs-comment">//        如何向背包中放入价值最多的物品，将问题这样分解：在只有一种物品的情况下，如何在指定容量内放入物品，解决了这个小问题，</span><br><span class="hljs-comment">//        再解决更大一点的问题：有两种物品的情况下如何放入物品。以此类推即可解决问题。</span><br><span class="hljs-comment">//        为什么说每个小问题的解都依赖前面小问题，是因为我们在放入物品时，都会比较在同等容量下，是原来的装入物品的价值大，还是</span><br><span class="hljs-comment">//        装入新的物品价值再加上剩余容量所能装入的最大价值之和大。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; path_.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; path_[<span class="hljs-number">0</span>].length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (weight_[i - <span class="hljs-number">1</span>] &gt; j) &#123;<br>                    package_[i][j] = package_[i - <span class="hljs-number">1</span>][j];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (package_[i - <span class="hljs-number">1</span>][j] &gt; (value_[i - <span class="hljs-number">1</span>] + package_[i - <span class="hljs-number">1</span>][j - weight_[i - <span class="hljs-number">1</span>]])) &#123;<br>                        package_[i][j] = package_[i - <span class="hljs-number">1</span>][j];<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        package_[i][j] = value_[i - <span class="hljs-number">1</span>] + package_[i - <span class="hljs-number">1</span>][j - weight_[i - <span class="hljs-number">1</span>]];<br>                        path_[i][j] = <span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] arr: package_) &#123;<br>            System.out.println(Arrays.toString(arr));<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] arr: path_) &#123;<br>            System.out.println(Arrays.toString(arr));<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;Max value: &quot;</span> + package_[obj_count][capacity]);<br><br>        <span class="hljs-keyword">int</span> i = obj_count;<br>        <span class="hljs-keyword">int</span> j = capacity;<br>        <span class="hljs-keyword">while</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; j &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (path_[i][j] == <span class="hljs-number">1</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;The idx of obj to put: &quot;</span> + i);<br>                j -= weight_[i - <span class="hljs-number">1</span>];<br>            &#125;<br>            i--;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法（七）</title>
    <link href="/2022/02/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <url>/2022/02/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法（七）"><a href="#数据结构与算法（七）" class="headerlink" title="数据结构与算法（七）"></a>数据结构与算法（七）</h1><h2 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h2><p>对于二叉排序树来说，在某些情况下生成的树形式为一个链表，这在一定程度上降低了查询速度，不能发挥二叉排序树的优势，AVL树解决了这个问题。AVL树的左子树高度与右子树高度相差始终不超过1，构建AVL树是在构建二叉排序树的基础上进行的。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AVLTreeDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;;<br>        NodeForAVLTree[] list = <span class="hljs-keyword">new</span> NodeForAVLTree[<span class="hljs-number">6</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            list[i] = <span class="hljs-keyword">new</span> NodeForAVLTree(array[i]);<br>        &#125;<br>        AVLTree avlTree = <span class="hljs-keyword">new</span> AVLTree(list[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; array.length; i++) &#123;<br>            list[<span class="hljs-number">0</span>].generateAVLTree(list[i]);<br>        &#125;<br><br>        avlTree.midOrder();<br>        System.out.println(list[<span class="hljs-number">0</span>].getLeftTreeHeight());<br>        System.out.println(list[<span class="hljs-number">0</span>].getRightTreeHeight());<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AVLTree</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> NodeForAVLTree root;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AVLTree</span><span class="hljs-params">(NodeForAVLTree root)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.root = root;<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">midOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        root.midOrder();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NodeForAVLTree</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">public</span> NodeForAVLTree left;<br>    <span class="hljs-keyword">public</span> NodeForAVLTree right;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NodeForAVLTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取以当前节点为根节点的树的高度</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getTreeHeight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Math.max(left == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span>: left.getTreeHeight(), right == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span>: right.getTreeHeight()) + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 获取左子树的高度</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLeftTreeHeight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (left == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left.getTreeHeight();<br>    &#125;<br>    <span class="hljs-comment">// 获取右子树的高度</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getRightTreeHeight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (right == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> right.getTreeHeight();<br>    &#125;<br>    <span class="hljs-comment">// 子树左旋转</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">leftRotate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 以根节点的值创建新节点</span><br>        NodeForAVLTree node = <span class="hljs-keyword">new</span> NodeForAVLTree(id);<br>        <span class="hljs-comment">// 把新节点的左子树设为根节点的左子树</span><br>        node.left = left;<br>        <span class="hljs-comment">// 把新节点的右子树设为根节点的右子树的左子树</span><br>        node.right = right.left;<br>        <span class="hljs-comment">// 把根节点的值改为根节点的右子节点的值</span><br>        id = right.id;<br>        <span class="hljs-comment">// 根节点的右子树设为右子树的右子树</span><br>        right = right.right;<br>        <span class="hljs-comment">// 根节点的左子树设为新节点</span><br>        left = node;<br>    &#125;<br>    <span class="hljs-comment">// 子树右旋转</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rightRotate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 以根节点的值创建新节点</span><br>        NodeForAVLTree node = <span class="hljs-keyword">new</span> NodeForAVLTree(id);<br>        <span class="hljs-comment">// 把新节点的右子树设为根节点的右子树</span><br>        node.right = right;<br>        <span class="hljs-comment">// 把新节点的左子树设为根节点的左子树的右子树</span><br>        node.left = left.right;<br>        <span class="hljs-comment">// 把根节点的值改为根节点的左子节点的值</span><br>        id = left.id;<br>        <span class="hljs-comment">// 根节点的左子树设为左子树的左子树</span><br>        left = left.left;<br>        <span class="hljs-comment">// 根节点的右子树设为新节点</span><br>        right = node;<br>    &#125;<br><br><span class="hljs-comment">//    除了上述两种情况，有时候还需要对子树双旋转，条件为：</span><br><span class="hljs-comment">//    右子树的左子树的高度大于右子树的右子树的高度: 先对右子树进行右旋转,再对当前树进行左旋转</span><br><span class="hljs-comment">//    左子树的右子树的高度大于左子树的左子树的高度: 先对左子树进行左旋转,再对当前树进行右旋转</span><br><br>    <span class="hljs-comment">// 构造AVL树</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">generateAVLTree</span><span class="hljs-params">(NodeForAVLTree node)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.id &gt; node.id) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">this</span>.left = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">this</span>.left.generateAVLTree(node);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.id &lt; node.id) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">this</span>.right = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">this</span>.right.generateAVLTree(node);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 检查此时是否满足AVL树的要求</span><br>        <span class="hljs-keyword">if</span> (getRightTreeHeight() - getLeftTreeHeight() &gt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (right.getLeftTreeHeight() &gt; right.getRightTreeHeight()) &#123;<br>                right.rightRotate();<br>            &#125;<br>            leftRotate();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (getLeftTreeHeight() - getRightTreeHeight() &gt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (left.getRightTreeHeight() &gt; left.getLeftTreeHeight()) &#123;<br>                left.leftRotate();<br>            &#125;<br>            rightRotate();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">midOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (left != <span class="hljs-keyword">null</span>) &#123;<br>            left.midOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">if</span> (right != <span class="hljs-keyword">null</span>) &#123;<br>            right.midOrder();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;NodeForAVLTree&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="B树，B-树，B-树"><a href="#B树，B-树，B-树" class="headerlink" title="B树，B*树，B+树"></a>B树，B*树，B+树</h2><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>对于一般二叉树来说，由于只有两个节点，因此在构建二叉树时，如果数据量较多，那么此时的数据读写量会非常大，生成的二叉树高度也会很高，为减少这种影响，B树允许每个节点存在多个数据项和节点，又称多叉树。</p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p>B+树是B树的变体，也是一种多路搜索树。B+树的所有数据都位于叶子节点中，而它的非叶子节点相当于是叶子节点的索引。</p><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B*树"></a>B*树</h3><p>B*树是B+树的变体，它在B+树的非根和非叶子节点增加了指向兄弟节点的指针。更多详细介绍，<a href="https://my.oschina.net/u/4116286/blog/3107389">参考</a></p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p>图表示了一种多对多的关系，它是一种数据结构，存在节点与边，两个节点的连接称之为边，以下代码完成了使用二维数组创建图，图的深度优先遍历和图的广度优先遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GraphDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Graph graph = <span class="hljs-keyword">new</span> Graph(<span class="hljs-number">5</span>);<br>        graph.node_list.add(<span class="hljs-string">&quot;A&quot;</span>);<br>        graph.node_list.add(<span class="hljs-string">&quot;B&quot;</span>);<br>        graph.node_list.add(<span class="hljs-string">&quot;C&quot;</span>);<br>        graph.node_list.add(<span class="hljs-string">&quot;D&quot;</span>);<br>        graph.node_list.add(<span class="hljs-string">&quot;E&quot;</span>);<br><br>        graph.add_edge(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        graph.add_edge(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br>        graph.add_edge(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br>        graph.add_edge(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>);<br>        graph.add_edge(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>);<br><br>        graph.show_array();<br><br><span class="hljs-comment">//        graph.dfs();</span><br>        graph.bfs();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Graph</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> ArrayList&lt;String&gt; node_list;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[][] graph_array;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> edge_count;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span>[] isVisited;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Graph</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.graph_array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][n];<br>        <span class="hljs-keyword">this</span>.node_list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">this</span>.isVisited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[n];<br>        <span class="hljs-keyword">this</span>.edge_count = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 图的深度优先遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; node_list.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (!isVisited[i]) &#123;<br>                dfs(i);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1)</span> </span>&#123;<br>        System.out.print(get_data_via_idx(v1) + <span class="hljs-string">&quot;-&gt;&quot;</span>);<br>        isVisited[v1] = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">int</span> temp = get_first_nei(v1);<br>        <span class="hljs-keyword">while</span> (temp != -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!isVisited[temp]) &#123;<br>                dfs(temp);<br>            &#125;<br>            temp = get_next_nei(v1, temp);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 图的广度优先遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; node_list.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (!isVisited[i]) &#123;<br>                bfs(i);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> head;<br>        <span class="hljs-keyword">int</span> neighbour;<br>        LinkedList&lt;Integer&gt; linkedList = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br>        System.out.print(get_data_via_idx(i) + <span class="hljs-string">&quot;-&gt;&quot;</span>);<br>        linkedList.add(i);<br>        isVisited[i] = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">while</span> (!linkedList.isEmpty()) &#123;<br>            head = linkedList.removeFirst();<br>            neighbour = get_first_nei(head);<br><br>            <span class="hljs-keyword">while</span> (neighbour != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (!isVisited[neighbour]) &#123;<br>                    System.out.print(get_data_via_idx(neighbour) + <span class="hljs-string">&quot;-&gt;&quot;</span>);<br>                    linkedList.add(neighbour);<br>                    isVisited[neighbour] = <span class="hljs-keyword">true</span>;<br>                &#125;<br>                neighbour = get_next_nei(head, neighbour);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 图基础方法</span><br>    <span class="hljs-comment">// 得到指定节点的第一个邻接节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_first_nei</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; node_list.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (graph_array[v1][i] == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 得到指定节点的下一个邻接节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_next_nei</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = v2 + <span class="hljs-number">1</span>; i &lt; node_list.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (graph_array[v1][i] == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回边的个数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_edge_count</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> edge_count;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示存储矩阵</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show_array</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] arr: graph_array) &#123;<br>            System.out.println(Arrays.toString(arr));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回节点的数目</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_node_count</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> node_list.size();<br>    &#125;<br><br>    <span class="hljs-comment">// 返回下标对应的数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get_data_via_idx</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idx)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> node_list.get(idx);<br>    &#125;<br><br>    <span class="hljs-comment">// 返回v1与v2的权值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_weight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> graph_array[v1][v2];<br>    &#125;<br><br>    <span class="hljs-comment">// 添加节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_node</span><span class="hljs-params">(String node)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.node_list.add(node);<br>    &#125;<br><br>    <span class="hljs-comment">// 添加边</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        graph_array[v1][v2] = weight;<br>        graph_array[v2][v1] = weight;<br>        edge_count++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法（六）</title>
    <link href="/2022/02/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <url>/2022/02/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法（六）"><a href="#数据结构与算法（六）" class="headerlink" title="数据结构与算法（六）"></a>数据结构与算法（六）</h1><h2 id="二叉树应用"><a href="#二叉树应用" class="headerlink" title="二叉树应用"></a>二叉树应用</h2><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)。堆排序将待排序序列构造成一个大顶堆，整个序列的最大值位于堆顶的根节点。之后将其与末尾元素进行交换。然后将剩余元素重新构造成一个大顶堆，重复上述过程，如此反复执行得到一个有序序列，<a href="https://www.cnblogs.com/chengxiao/p/6129630.html">参考</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeapSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>&#125;;<br>        heapSorting(array);<br>        System.out.println(Arrays.toString(array));<br>    &#125;<br><br>    <span class="hljs-comment">// 堆排序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">heapSorting</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//     将数组构建成一个大顶堆;array.length / 2 - 1所指向的位置一定是二叉树从下至上第一个非叶节点</span><br><span class="hljs-comment">//     此时由下至上构建二叉树，最后二叉树的顶端即为最大值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = array.length / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            transform_heap(array, i, array.length);<br>        &#125;<br><br>        <span class="hljs-comment">// 调整大顶堆</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = array.length - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>            temp = array[i];<br>            array[i] = array[<span class="hljs-number">0</span>];<br>            array[<span class="hljs-number">0</span>] = temp;<br>            transform_heap(array, <span class="hljs-number">0</span>, i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 将以i为顶的二叉树调整为大顶堆，也即把最大值放在以i为顶的二叉树的顶部</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform_heap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> length)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp = array[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>; j &lt; length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (j + <span class="hljs-number">1</span> &lt; length &amp;&amp; array[j] &lt; array[j + <span class="hljs-number">1</span>]) &#123;<br>                j += <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (array[i] &lt; array[j]) &#123;<br>                array[i] = array[j];<br>                i = j;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        array[i] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Huffman树"><a href="#Huffman树" class="headerlink" title="Huffman树"></a>Huffman树</h3><p>给定N个权值作为N个叶子结点，构造一棵二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HuffmanTree</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">13</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">29</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>&#125;;<br>        NodeOfHuffmanTree huffmanTree = generateHuffmanTree(array);<br>        huffmanTree.preShow();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> NodeOfHuffmanTree <span class="hljs-title">generateHuffmanTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        ArrayList&lt;NodeOfHuffmanTree&gt; huffmanTree = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j : array) &#123;<br>            huffmanTree.add(<span class="hljs-keyword">new</span> NodeOfHuffmanTree(j));<br>        &#125;<br>        <span class="hljs-keyword">while</span> (huffmanTree.size() &gt; <span class="hljs-number">1</span>) &#123;<br>            Collections.sort(huffmanTree);<br><br>            NodeOfHuffmanTree left_node = huffmanTree.get(<span class="hljs-number">0</span>);<br>            NodeOfHuffmanTree right_node = huffmanTree.get(<span class="hljs-number">1</span>);<br>            NodeOfHuffmanTree parent_node = <span class="hljs-keyword">new</span> NodeOfHuffmanTree(left_node.id + right_node.id);<br><br>            parent_node.left = left_node;<br>            parent_node.right = right_node;<br><br>            huffmanTree.add(parent_node);<br>            huffmanTree.remove(left_node);<br>            huffmanTree.remove(right_node);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> huffmanTree.get(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NodeOfHuffmanTree</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">NodeOfHuffmanTree</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">public</span> NodeOfHuffmanTree left;<br>    <span class="hljs-keyword">public</span> NodeOfHuffmanTree right;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NodeOfHuffmanTree</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;NodeOfHuffmanTree&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 前序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preShow</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.left.preShow();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.right.preShow();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(NodeOfHuffmanTree o)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.id - o.id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用Huffman树进行数据加密与解密"><a href="#使用Huffman树进行数据加密与解密" class="headerlink" title="使用Huffman树进行数据加密与解密"></a>使用Huffman树进行数据加密与解密</h3><p>通过把字母出现频次构建Huffman树，进而得到各字母的编码，以此编码表即可加密与解密数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HuffmanCode</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;String, Integer&gt; frequency = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;String, String&gt; code_graph = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> StringBuilder builders = <span class="hljs-keyword">new</span> StringBuilder();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String sentence = <span class="hljs-string">&quot;i like like like java do you like a java&quot;</span>;<br>        frequency = getFrequency(sentence);<br><br>        <span class="hljs-keyword">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[frequency.size()];<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Object obj: frequency.values()) &#123;<br>            array[i] = (<span class="hljs-keyword">int</span>) obj;<br>            i++;<br>        &#125;<br><br>        NodeOfHuffmanTree tree = HuffmanTree.generateHuffmanTree(array);<br><br>        getHuffmanCode(tree);<br><br>        System.out.println(code_graph);<br><br>        System.out.println(getZipStr(sentence));<br><br>        System.out.println(unZipStr(getZipStr(sentence)));<br><br>    &#125;<br><br><span class="hljs-comment">//    i like like like java do you like a java 中 d出现1次，记为d:1，则</span><br><span class="hljs-comment">//    d:1 y:1 u:1 j:2 v:2 o:2 l:4 k:4 e:4 i:5 a:5 空格:9</span><br>    <span class="hljs-comment">// 得到任意英文句子的字母出现频率</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;String, Integer&gt; <span class="hljs-title">getFrequency</span><span class="hljs-params">(String sentence)</span> </span>&#123;<br>        HashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">int</span> length = sentence.length();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (map.containsKey(sentence.charAt(i) + <span class="hljs-string">&quot;&quot;</span>)) &#123;<br>                map.put(sentence.charAt(i) + <span class="hljs-string">&quot;&quot;</span>, map.get(sentence.charAt(i) + <span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                map.put(sentence.charAt(i) + <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br><span class="hljs-comment">//    重载getHuffmanCode</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getHuffmanCode</span><span class="hljs-params">(NodeOfHuffmanTree node)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        getHuffmanCode(node.left, builders, <span class="hljs-string">&quot;0&quot;</span>);<br>        getHuffmanCode(node.right, builders, <span class="hljs-string">&quot;1&quot;</span>);<br>    &#125;<br><br><span class="hljs-comment">//    通过Huffman树找到各字母的编码</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getHuffmanCode</span><span class="hljs-params">(NodeOfHuffmanTree node, StringBuilder builder, String code)</span> </span>&#123;<br>        StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder(builder);<br>        stringBuilder.append(code);<br>        <span class="hljs-keyword">if</span> (node != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!isLeafNode(node)) &#123;<br>                getHuffmanCode(node.left, stringBuilder, <span class="hljs-string">&quot;0&quot;</span>);<br>                getHuffmanCode(node.right, stringBuilder, <span class="hljs-string">&quot;1&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                code_graph.put(getAimChar(node.id), stringBuilder.toString());<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">//    通过数字寻找对应字母</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getAimChar</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        Set&lt;String&gt; strings = frequency.keySet();<br>        String aim = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (String s: strings) &#123;<br>            <span class="hljs-keyword">if</span> (frequency.get(s) == i) &#123;<br>                aim = s;<br>                frequency.remove(s);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> aim;<br>    &#125;<br><br><span class="hljs-comment">//    判断是否到达叶子节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isLeafNode</span><span class="hljs-params">(NodeOfHuffmanTree node)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> node.left == <span class="hljs-keyword">null</span> &amp;&amp; node.right == <span class="hljs-keyword">null</span>;<br>    &#125;<br><br><span class="hljs-comment">//    生成压缩后的字符串</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getZipStr</span><span class="hljs-params">(String sentence)</span> </span>&#123;<br>        StringBuilder s = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; sentence.length(); i++) &#123;<br>            s.append(code_graph.get(sentence.charAt(i) + <span class="hljs-string">&quot;&quot;</span>));<br>        &#125;<br>        <span class="hljs-keyword">return</span> s.toString();<br>    &#125;<br><br><span class="hljs-comment">//    还原字符串</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">unZipStr</span><span class="hljs-params">(String code)</span> </span>&#123;<br>        <span class="hljs-comment">// 翻转编码表</span><br>        HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String key: code_graph.keySet()) &#123;<br>            map.put(code_graph.get(key), key);<br>        &#125;<br>        StringBuilder builder = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; code.length(); i++) &#123;<br>            <span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                String s = map.get(code.substring(i, i + count));<br>                <span class="hljs-keyword">if</span> (s == <span class="hljs-keyword">null</span> &amp;&amp; i + count &lt; code.length()) &#123;<br>                    count++;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    builder.append(s);<br>                    i += count - <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> builder.toString();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><p>二叉排序树的特点是左子节点小于其父节点，右子节点大于其父节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySortTree</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>&#125;;<br>        NodeForBST[] list = <span class="hljs-keyword">new</span> NodeForBST[array.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            list[i] = <span class="hljs-keyword">new</span> NodeForBST(array[i]);<br>        &#125;<br>        BSTTree tree = <span class="hljs-keyword">new</span> BSTTree(list[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; array.length; i++) &#123;<br>            tree.getBST(list[i]);<br>        &#125;<br>        tree.midOrder();<br>        tree.deleteNode(<span class="hljs-number">2</span>);<br>        tree.midOrder();<br>        tree.deleteNode(<span class="hljs-number">10</span>);<br>        tree.midOrder();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BSTTree</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> NodeForBST root;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BSTTree</span><span class="hljs-params">(NodeForBST node)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.root = node;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建二叉排序树</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getBST</span><span class="hljs-params">(NodeForBST node)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            root = node;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        root.generateBST(node);<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">midOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;root is empty!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        root.midOrder();<br>    &#125;<br><br>    <span class="hljs-comment">// 查找节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> NodeForBST <span class="hljs-title">findAimNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root.getAimNode(id);<br>    &#125;<br><br>    <span class="hljs-comment">// 查找父节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> NodeForBST <span class="hljs-title">findFatherNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root.getFatherNode(id);<br>    &#125;<br><br>    <span class="hljs-comment">// 查找最小节点的值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMinValue</span><span class="hljs-params">(NodeForBST node)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (node.left != <span class="hljs-keyword">null</span>) &#123;<br>            node = node.left;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node.id;<br>    &#125;<br><br><span class="hljs-comment">//    删除节点</span><br><span class="hljs-comment">//    对于删除节点，应当分三种情况讨论：如果要删除的节点为叶子节点，那么只需要找到此叶子节点的父节点然后置空即可；</span><br><span class="hljs-comment">//    如果要删除的节点为单子树节点，那么需要把此节点替换为此节点的叶子节点</span><br><span class="hljs-comment">//    如果要删除的节点为双子树节点，可以使用两种方式:</span><br><span class="hljs-comment">//    第一种: 将右子树的最小值替换此节点;第二种: 将左子树的最大值替换此节点</span><br><span class="hljs-comment">//    要实现上述功能, 必须存在一个寻找指定节点的函数和一个寻找指定节点的父节点的函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        NodeForBST node = findAimNode(id);<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (node.left == <span class="hljs-keyword">null</span> &amp;&amp; node.right == <span class="hljs-keyword">null</span>) &#123;<br>            NodeForBST fatherNode = findFatherNode(id);<br>            <span class="hljs-keyword">if</span> (fatherNode.left != <span class="hljs-keyword">null</span> &amp;&amp; fatherNode.left.id == id) &#123;<br>                fatherNode.left = <span class="hljs-keyword">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (fatherNode.right != <span class="hljs-keyword">null</span> &amp;&amp; fatherNode.right.id == id) &#123;<br>                fatherNode.right = <span class="hljs-keyword">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (node.left != <span class="hljs-keyword">null</span> &amp;&amp; node.right != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">int</span> value = getMinValue(node);<br>            NodeForBST node1 = findFatherNode(value);<br>            <span class="hljs-keyword">if</span> (node1.left != <span class="hljs-keyword">null</span> &amp;&amp; node1.left.id == value) &#123;<br>                node1.left = <span class="hljs-keyword">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                node1.right = <span class="hljs-keyword">null</span>;<br>            &#125;<br>            node.id = value;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (node.left != <span class="hljs-keyword">null</span>) &#123;<br>            node.id = node.left.id;<br>            node.left = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        node.id = node.right.id;<br>        node.right = <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NodeForBST</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">public</span> NodeForBST left;<br>    <span class="hljs-keyword">public</span> NodeForBST right;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NodeForBST</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;NodeForBST&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 寻找指定节点的父节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> NodeForBST <span class="hljs-title">getFatherNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.right.id == id) || (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.left.id == id)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.id &gt; id) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.left.getFatherNode(id);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.id &lt; id) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.right.getFatherNode(id);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 寻找指定节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> NodeForBST <span class="hljs-title">getAimNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.id == id) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.id &gt; id) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.left.getAimNode(id);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.id &lt; id) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.right.getAimNode(id);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建二叉排序树</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">generateBST</span><span class="hljs-params">(NodeForBST node)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.id &gt; node.id) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">this</span>.left = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">this</span>.left.generateBST(node);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">this</span>.right = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">this</span>.right.generateBST(node);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">midOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.left.midOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.right.midOrder();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法（五）</title>
    <link href="/2022/02/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2022/02/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法（五）"><a href="#数据结构与算法（五）" class="headerlink" title="数据结构与算法（五）"></a>数据结构与算法（五）</h1><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。<br>使用哈希表完成员工信息增删改查：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaffHashTab</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> StaffList[] staffList;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StaffHashTab</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.size = size;<br>        StaffList[] staffList = <span class="hljs-keyword">new</span> StaffList[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            staffList[i] = <span class="hljs-keyword">new</span> StaffList();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 添加员工</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_staff</span><span class="hljs-params">(Staff staff)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> position = getStaffPosition(staff.id);<br>        staffList[position].add_staff(staff);<br>    &#125;<br><br>    <span class="hljs-comment">// 查找指定员工</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Staff <span class="hljs-title">get_aim_staff</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> position = getStaffPosition(id);<br>        <span class="hljs-keyword">return</span> staffList[position].getAimStaff(id);<br>    &#125;<br><br>    <span class="hljs-comment">// 编辑员工信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">edit_staff_info</span> <span class="hljs-params">(String info, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> position = getStaffPosition(id);<br>        staffList[position].edit_staff_info(info, id);<br>    &#125;<br><br>    <span class="hljs-comment">// 通过id确定员工所在位置</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getStaffPosition</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id % size;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 遍历员工列表</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getAllStaff</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            staffList[i].get_all_staff();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 员工链表</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaffList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Staff head_staff;<br><br>    <span class="hljs-comment">// 向链表添加员工</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_staff</span><span class="hljs-params">(Staff staff)</span> </span>&#123;<br>        Staff temp = head_staff;<br>        <span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>) &#123;<br>            temp = staff;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">while</span> (temp.next_staff != <span class="hljs-keyword">null</span> &amp;&amp; staff.id &lt; temp.id) &#123;<br>                temp = temp.next_staff;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next_staff != <span class="hljs-keyword">null</span>) &#123;<br>                staff.next_staff = temp.next_staff;<br>            &#125;<br>            temp.next_staff = staff;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 查找指定员工</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Staff <span class="hljs-title">getAimStaff</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        Staff temp = head_staff;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">while</span> (temp.next_staff != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp.id == id) &#123;<br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next_staff;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (temp.id == id) &#123;<br>            flag = <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-keyword">return</span> temp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 编辑员工信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">edit_staff_info</span><span class="hljs-params">(String info, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        Staff staff = getAimStaff(id);<br>        <span class="hljs-keyword">if</span> (staff == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Cannot find user&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        staff.name = info;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 遍历员工列表</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_all_staff</span><span class="hljs-params">()</span> </span>&#123;<br>        Staff temp = head_staff;<br>        <span class="hljs-keyword">while</span> (temp.next_staff != <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(temp);<br>            temp = temp.next_staff;<br>        &#125;<br>        System.out.println(temp);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 员工类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Staff</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> Staff next_staff;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Staff</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Staff&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>使用树存储的方式可以提高数据存储，读取的效率，二叉树结构是树存储结构中比较简单的一种，二叉树的每个节点最多只能有两个子节点。如果一个二叉树的所有叶子节点都在最后一层，称之为满二叉树；如果一个二叉树的所有叶子节点都在最后一层或者倒数第二次，称之为完全二叉树。</p><h3 id="二叉树的创建，遍历，查找："><a href="#二叉树的创建，遍历，查找：" class="headerlink" title="二叉树的创建，遍历，查找："></a>二叉树的创建，遍历，查找：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTreeDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Node node1 = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;one&quot;</span>);<br>        node1.setLeft(<span class="hljs-keyword">new</span> Node(<span class="hljs-number">1002</span>, <span class="hljs-string">&quot;two&quot;</span>));<br>        node1.setRight(<span class="hljs-keyword">new</span> Node(<span class="hljs-number">1003</span>, <span class="hljs-string">&quot;three&quot;</span>));<br>        node1.getLeft().setRight(<span class="hljs-keyword">new</span> Node(<span class="hljs-number">1004</span>, <span class="hljs-string">&quot;four&quot;</span>));<br>        node1.getRight().setLeft(<span class="hljs-keyword">new</span> Node(<span class="hljs-number">1005</span>, <span class="hljs-string">&quot;five&quot;</span>));<br>        BinaryTree tree = <span class="hljs-keyword">new</span> BinaryTree(node1);<br><span class="hljs-comment">//        tree.preOrder();</span><br><span class="hljs-comment">//        tree.midOrder();</span><br><span class="hljs-comment">//        tree.postOrder();</span><br><span class="hljs-comment">//        System.out.println(tree.preSearch(1004));</span><br><span class="hljs-comment">//        System.out.println(tree.midSearch(1004));</span><br><span class="hljs-comment">//        System.out.println(tree.postSearch(1004));</span><br><span class="hljs-comment">//        System.out.println(tree.preSearch(8));</span><br><span class="hljs-comment">//        System.out.println(tree.midSearch(8));</span><br><span class="hljs-comment">//        System.out.println(tree.postSearch(8));</span><br>        tree.deleteNode(<span class="hljs-number">1003</span>);<br>        tree.preOrder();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Node left;<br>    <span class="hljs-keyword">private</span> Node right;<br><br>    <span class="hljs-comment">// 构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">// Getter与Setter方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">getLeft</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">getRight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLeft</span><span class="hljs-params">(Node left)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRight</span><span class="hljs-params">(Node right)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 前序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.left.preOrder();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.right.preOrder();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">midOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.left.midOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.right.midOrder();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 后序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.left.postOrder();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.right.postOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 前序查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">preSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getId() == id) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125;<br>        Node temp = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getLeft() != <span class="hljs-keyword">null</span>) &#123;<br>            temp = <span class="hljs-keyword">this</span>.getLeft().preSearch(id);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (temp != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> temp;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getRight() != <span class="hljs-keyword">null</span>) &#123;<br>            temp = <span class="hljs-keyword">this</span>.getRight().preSearch(id);<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br><br>    <span class="hljs-comment">// 中序查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">midSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        Node temp = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getLeft() != <span class="hljs-keyword">null</span>) &#123;<br>            temp = <span class="hljs-keyword">this</span>.getLeft().preSearch(id);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (temp != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> temp;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getId() == id) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getRight() != <span class="hljs-keyword">null</span>) &#123;<br>            temp = <span class="hljs-keyword">this</span>.getRight().preSearch(id);<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br><br>    <span class="hljs-comment">// 后序查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">postSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        Node temp = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getLeft() != <span class="hljs-keyword">null</span>) &#123;<br>            temp = <span class="hljs-keyword">this</span>.getLeft().preSearch(id);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (temp != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> temp;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getRight() != <span class="hljs-keyword">null</span>) &#123;<br>            temp = <span class="hljs-keyword">this</span>.getRight().preSearch(id);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.getId() == id) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除指定节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-comment">// 如果此节点的左边为要找的节点，将此节点左边置空</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.left.id == id) &#123;<br>            <span class="hljs-keyword">this</span>.left = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 如果此节点的右边为要找的节点，将此节点右边置空</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.right.id == id) &#123;<br>            <span class="hljs-keyword">this</span>.right = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 向左进行递归删除</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.left.deleteNode(id);<br>        &#125;<br>        <span class="hljs-comment">// 向右进行递归删除</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.right.deleteNode(id);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTree</span></span>&#123;<br>    <span class="hljs-keyword">private</span> Node root;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BinaryTree</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.root = node;<br>    &#125;<br><br>    <span class="hljs-comment">// 前序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The binary tree is empty!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        root.preOrder();<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">midOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The binary tree is empty!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        root.midOrder();<br>    &#125;<br><br>    <span class="hljs-comment">// 后序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The binary tree is empty!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        root.postOrder();<br>    &#125;<br><br>    <span class="hljs-comment">// 前序查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">preSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The binary tree is empty!&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root.preSearch(id);<br>    &#125;<br><br>    <span class="hljs-comment">// 中序查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">midSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The binary tree is empty!&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root.midSearch(id);<br>    &#125;<br><br>    <span class="hljs-comment">// 后序查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">postSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The binary tree is empty!&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root.postSearch(id);<br>    &#125;<br><br>    <span class="hljs-comment">// 删除指定节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The binary tree is empty!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.getId() == id) &#123;<br>            root = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        root.deleteNode(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="顺序存储二叉树"><a href="#顺序存储二叉树" class="headerlink" title="顺序存储二叉树"></a>顺序存储二叉树</h3><p>顺序存储二叉树通常指完全二叉树，它与数组这两种存储方式可以互相转换，对于顺序存储二叉树里的第n个元素来说，其左子节点的下标为2*n+1，右子节点的下标为2*n，父节点为(n-1)/2。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderBinaryTreeDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 以数组方式存储，以二叉树方式进行遍历</span><br>        <span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;<br>        orderByPre(array, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">orderByPre</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        System.out.println(array[n]);<br>        <span class="hljs-keyword">if</span> (array.length &gt; <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>) &#123;<br>            orderByPre(array, <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (array.length &gt; <span class="hljs-number">2</span> * n + <span class="hljs-number">2</span>) &#123;<br>            orderByPre(array, <span class="hljs-number">2</span> * n + <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线索化二叉树"><a href="#线索化二叉树" class="headerlink" title="线索化二叉树"></a>线索化二叉树</h3><p>线索化二叉树是在普通二叉树的基础上利用节点的空指针，指向此节点在某种遍历方式下的前序节点与后继节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadBinaryTree</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        NodeDemo nodeDemo = <span class="hljs-keyword">new</span> NodeDemo(<span class="hljs-number">1</span>);<br>        nodeDemo.left = <span class="hljs-keyword">new</span> NodeDemo(<span class="hljs-number">3</span>);<br>        nodeDemo.right = <span class="hljs-keyword">new</span> NodeDemo(<span class="hljs-number">6</span>);<br>        nodeDemo.left.left = <span class="hljs-keyword">new</span> NodeDemo(<span class="hljs-number">8</span>);<br>        nodeDemo.left.right = <span class="hljs-keyword">new</span> NodeDemo(<span class="hljs-number">10</span>);<br>        nodeDemo.right.left = <span class="hljs-keyword">new</span> NodeDemo(<span class="hljs-number">14</span>);<br><br>        ThreadTree threadTree = <span class="hljs-keyword">new</span> ThreadTree(nodeDemo);<br>        threadTree.threadTreeFun();<br><br>        System.out.println(nodeDemo.left.right.left);<br>        System.out.println(nodeDemo.left.right.right);<br><br>        threadTree.getThreadNode();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTree</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> NodeDemo root;<br>    <span class="hljs-keyword">public</span> NodeDemo pre;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadTree</span><span class="hljs-params">(NodeDemo root)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.root = root;<br>    &#125;<br><br>    <span class="hljs-comment">// 重载线索化方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threadTreeFun</span><span class="hljs-params">()</span> </span>&#123;<br>        threadTreeFun(root);<br>    &#125;<br><br>    <span class="hljs-comment">// 二叉树线索化方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threadTreeFun</span><span class="hljs-params">(NodeDemo node)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 向左线索化二叉树</span><br>        threadTreeFun(node.left);<br><br>        <span class="hljs-comment">// 线索化当前节点，首先处理前序节点，如果此节点的左子节点为null，将左子节点赋值为pre</span><br>        <span class="hljs-keyword">if</span> (node.left == <span class="hljs-keyword">null</span>) &#123;<br>            node.left = pre;<br>            node.leftType = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 之后处理后序节点，此时处理的是此节点的前一个节点的后序节点，因此将其赋值为node</span><br>        <span class="hljs-keyword">if</span> (pre != <span class="hljs-keyword">null</span> &amp;&amp; pre.right == <span class="hljs-keyword">null</span>) &#123;<br>            pre.right = node;<br>            pre.rightType = <span class="hljs-number">1</span>;<br>        &#125;<br>        pre = node;<br><br>        <span class="hljs-comment">// 向右线索化二叉树</span><br>        threadTreeFun(node.right);<br>    &#125;<br><br>    <span class="hljs-comment">// 线索化二叉树遍历方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getThreadNode</span><span class="hljs-params">()</span> </span>&#123;<br>        NodeDemo node = root;<br>        <span class="hljs-keyword">while</span> (node != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">while</span> (node.leftType == <span class="hljs-number">0</span>) &#123;<br>                node = node.left;<br>            &#125;<br>            System.out.println(node);<br>            <span class="hljs-keyword">while</span> (node.rightType == <span class="hljs-number">1</span>) &#123;<br>                node = node.right;<br>                System.out.println(node);<br>            &#125;<br>            node = node.right;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NodeDemo</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">public</span> NodeDemo left;<br>    <span class="hljs-keyword">public</span> NodeDemo right;<br>    <span class="hljs-comment">// leftType 与 rightType规定了二叉树节点类型，若为0，为正常二叉树，若为1则为包含前序节点与后序节点的节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> leftType;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> rightType;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NodeDemo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;NodeDemo&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法（四）</title>
    <link href="/2022/02/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2022/02/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法（四）"><a href="#数据结构与算法（四）" class="headerlink" title="数据结构与算法（四）"></a>数据结构与算法（四）</h1><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序是对冒泡排序的一种改进，通过一次排序将数据分成两部分，其中一部分的数据比另外一组数据都要小，多次递归使用直至数组有序。快速排序相当于为数组的每个元素找到自己的位置，对于一个数组，首先以首位元素为基准，设置头指针指向队首，尾指针指向队尾。首先从数组尾部向前遍历，如果找到比基准小的元素，就将头指针的值设置为此元素，接着从数组头部向队尾遍历，如果找到比基准大的元素，就将尾指针的值设置为此元素，当头指针与尾指针指向相同位置时，退出循环，此时头指针所指向的位置即为基准应在的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">23</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">18</span>&#125;;<br>        quickSorting(array, <span class="hljs-number">0</span>, array.length -  <span class="hljs-number">1</span>);<br>        System.out.println(Arrays.toString(array));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSorting</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (low &lt; high) &#123;<br>            <span class="hljs-keyword">int</span> position = getPosition(array, low, high);<br>            quickSorting(array, low, position - <span class="hljs-number">1</span>);<br>            quickSorting(array, position + <span class="hljs-number">1</span>, high);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPosition</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp = array[low];<br>        <span class="hljs-keyword">while</span> (low &lt; high) &#123;<br>            <span class="hljs-keyword">while</span> (low &lt; high &amp;&amp; array[high] &gt;= temp) &#123;<br>                high--;<br>            &#125;<br>            array[low] = array[high];<br><br>            <span class="hljs-keyword">while</span> (low &lt; high &amp;&amp; array[low] &lt;= temp) &#123;<br>                low++;<br>            &#125;<br>            array[high] = array[low];<br>        &#125;<br>        array[low] = temp;<br>        <span class="hljs-keyword">return</span> low;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序使用了分治的思想，首先将问题分成多个小问题，然后再递归解决。具体来说，首先将数组不断二分，直至分成每一个一组，之后再按照大小顺序进行合并，完成排序，<a href="https://www.cnblogs.com/chengxiao/p/6194356.html">代码参考</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MergeSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">23</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">18</span>, <span class="hljs-number">20</span>&#125;;<br>        mergeSorting(array);<br>        System.out.println(Arrays.toString(array));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSorting</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] temp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[array.length];<br>        mergeSorting(array, <span class="hljs-number">0</span>, array.length - <span class="hljs-number">1</span>, temp);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSorting</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span>[] temp)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (left &lt; right) &#123;<br>            <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>            mergeSorting(array, left, mid, temp);<br>            mergeSorting(array, mid + <span class="hljs-number">1</span>, right, temp);<br>            merge(array, left, mid, right, temp);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span>[] temp)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = left;<br>        <span class="hljs-keyword">int</span> j = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<br>            <span class="hljs-keyword">if</span> (array[i] &lt; array[j]) &#123;<br>                temp[t++] = array[i++];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                temp[t++] = array[j++];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (i &lt;= mid) &#123;<br>            temp[t++] = array[i++];<br>        &#125;<br>        <span class="hljs-keyword">while</span> (j &lt;= right) &#123;<br>            temp[t++] = array[j++];<br>        &#125;<br>        t = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            array[left++] = temp[t++];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>将整数按位数切割成不同的数字，然后按每个位数分别比较。将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RadixSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">23</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">18</span>, <span class="hljs-number">20</span>&#125;;<br>        radixSorting(array);<br>        System.out.println(Arrays.toString(array));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">radixSorting</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> maxLength = getMaxLength(array);<br><br>        <span class="hljs-comment">// 创建数组</span><br>        <span class="hljs-keyword">int</span>[][] sortArray = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>][array.length];<br>        <span class="hljs-keyword">int</span>[] count = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br><br>        <span class="hljs-comment">// 写入array的临时辅助指针</span><br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 依次存放读取数据，重复maxLength次</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, n = <span class="hljs-number">1</span>; i &lt; maxLength; i++, n *= <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-comment">// 获得指定位的数据，依次存入sortArray中</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k : array) &#123;<br>                sortArray[k / n % <span class="hljs-number">10</span>][count[k / n % <span class="hljs-number">10</span>]] = k;<br>                count[k / n % <span class="hljs-number">10</span>]++;<br>            &#125;<br><br>            <span class="hljs-comment">// 依次取出数据，放入array中</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (count[j] != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; count[j]; k++) &#123;<br>                        array[temp++] = sortArray[j][k];<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 复位</span><br>            temp = <span class="hljs-number">0</span>;<br>            count = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 寻找数组元素最大长度</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMaxLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> max = array[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ele: array) &#123;<br>            <span class="hljs-keyword">if</span> (ele &gt; max) &#123;<br>                max = ele;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max + <span class="hljs-string">&quot;&quot;</span>.length();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h3 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h3><p>从头至尾遍历数组，直至找到指定值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinearSearch</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;index = &quot;</span> + linearSearch(array, <span class="hljs-number">3</span>));<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">linearSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> aim)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (array[i] == aim) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>使用二分查找的前提为数组为有序的。每次进行二分查找时，比较序列中间位置与目标数据的大小，如果比目标数据大，则仅需比较中间位置左边的序列，否则就比较中间位置右边的序列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySearch</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;index = &quot;</span> + binarySearch(array, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> aim, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (left &gt; right) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br><br>        <span class="hljs-keyword">if</span> (array[mid] &gt; aim) &#123;<br>            <span class="hljs-keyword">return</span> binarySearch(array, aim, left, mid - <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (array[mid] &lt; aim) &#123;<br>            <span class="hljs-keyword">return</span> binarySearch(array, aim, mid + <span class="hljs-number">1</span>, right);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h3><p>插值查找与二分查找的区别在于mid位置的计算方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InsertValueSearch</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;index = &quot;</span> + insertSearch(array, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> aim, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (left &gt; right || aim &lt; array[<span class="hljs-number">0</span>] || aim &gt; array[array.length - <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> mid = left + (right - left) * (aim - array[left]) / (array[right] - array[left]);<br>        <span class="hljs-keyword">if</span> (array[mid] &gt; aim) &#123;<br>            <span class="hljs-keyword">return</span> insertSearch(array, aim, left, mid - <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (array[mid] &lt; aim) &#123;<br>            <span class="hljs-keyword">return</span> insertSearch(array, aim, mid + <span class="hljs-number">1</span>, right);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell脚本使用</title>
    <link href="/2022/02/12/Shell%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/02/12/Shell%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-Shell脚本使用"><a href="#Linux-Shell脚本使用" class="headerlink" title="Linux Shell脚本使用"></a>Linux Shell脚本使用</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​        shell是一个命令行解释器，接受用户与系统命令，调用操作系统内核。Linux系统提供了Shell解析器，键入以下命令来查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">cat /etc/shells<br></code></pre></td></tr></table></figure><p>​        Centos默认解析器为bash。在bin文件夹下执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ll | grep bash<br></code></pre></td></tr></table></figure><p>​        即可发现sh为bash软链接。Linux中的软链接，类似于windows系统的快捷键。譬如你将windows系统的D盘中某一个文件夹放在桌面上当做快捷键。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>​        第一个shell脚本，依次执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch helloworld.sh<br><br>vi helloworld.sh<br></code></pre></td></tr></table></figure><p>​        在文件里写入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>echo &quot;hello, shell&quot;<br></code></pre></td></tr></table></figure><p>​        退出编辑，键入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh helloworld.sh<br></code></pre></td></tr></table></figure><p>​        系统打印hello, shell。<br>​        要执行脚本，可以使用bash/sh加上文件的相对路径或绝对路径，使用系统的shell解释器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh helloworld.sh<br>bash helloworld.sh<br>sh /opt/shellpractice/helloworld.sh<br>bash /opt/shellpractice/helloworld.sh<br></code></pre></td></tr></table></figure><p>​        或者采用输入脚本的绝对路径或相对路径执行脚本，此时必须具有可执行权限+x。现在来执行脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./helloworld.sh<br></code></pre></td></tr></table></figure><p>提示权限不足，使用查看详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ll -l<br><br>-rw-r--r--. 1 root root 32 2月  11 21:56 helloworld.sh<br></code></pre></td></tr></table></figure><p>​        为脚本添加执行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod u+x helloworld.sh<br></code></pre></td></tr></table></figure><p>​        执行脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./helloworld.sh<br></code></pre></td></tr></table></figure><p>​        创建多命令脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch second.sh<br>vi second.sh<br></code></pre></td></tr></table></figure><p>​        编辑脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>cd /opt/data<br>touch test.txt<br>echo &quot;test.txt&quot; &gt;&gt;test.txt<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>​        Linux存在系统变量：$HOME、$PWD、$SHELL、$USER等，通过以下命令查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $USER<br></code></pre></td></tr></table></figure><p>​        <strong>自定变量操作</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">a=5 # 定义变量<br><br>echo $a # 输出变量<br><br>a=8 # 改变变量<br> <br>echo $a # 输出变量<br><br>unset a # 撤销变量<br><br>readonly a # 只读变量，unset 命令不能删除只读变量<br><br>export a # 使a变为全局变量，其余脚本也可使用<br></code></pre></td></tr></table></figure><p>​        在bash中，变量默认类型都是字符串类型，无法直接进行数值运算。<br>​        字符串可以使用单引号或者双引号，其中如果使用单引号无法使用转义字符和变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><br>my_name=&quot;tom&quot;<br>word1=&#x27;hello,$my_name&#x27;<br>word2=&#x27;hello,&#x27;$my_name&#x27;&#x27;<br>echo $word1 $word2<br><br>test_name=&quot;jerry&quot;<br>word3=&quot;hello,$test_name&quot;<br>word4=&quot;hello,&quot;$test_name&quot;&quot;<br>echo $word3 $word4<br></code></pre></td></tr></table></figure><p>​        <strong>几个特殊的变量</strong>：<br>​        $n：查询脚本的参数，$0为文件名。<br>​        $#：获取所有输入参数个数，常用于循环<br>​        $*：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体<br>​        $?：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；否则证明上一个命令执行不正确。<br>​        $@：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待</p><p>​        <strong>数组操作</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">my_array=(A B &quot;C&quot; D) # 在shell中定义数组<br><br>echo $&#123;array_name[index]&#125; # 读取数组值<br><br>echo $&#123;array_name[*]&#125; # 读取所有值<br>echo $&#123;array_name[@]&#125;<br><br>echo $&#123;#array_name[@]&#125; # 获取数组长度<br></code></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h3><p>​        原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。expr 是一款表达式计算工具，使用它能完成表达式的求值操作。创建sh文件，输入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><br>test=`expr 2 + 2`<br>echo &quot;2 + 2 = $test&quot;<br></code></pre></td></tr></table></figure><p>​        + ,  - ,  \*,   /,  %  为shell中的加，减，乘，除，取余；注意表达式和运算符之间要有空格，完整的表达式要被 <strong>` `</strong> 包含。<br>​        也可以通过表达式使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">s=$[(2+3)/5]<br>echo $s<br></code></pre></td></tr></table></figure><h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><p>​        关系运算符只支持数字，不支持字符串，除非字符串的值是数字。<br>​        <strong>-eq</strong>    检测两个数是否相等，相等返回 true。<br>​        <strong>-ne</strong>    检测两个数是否不相等，不相等返回 true。<br>​        <strong>-gt</strong>    检测左边的数是否大于右边的，如果是，则返回 true。<br>​        <strong>-lt</strong>    检测左边的数是否小于右边的，如果是，则返回 true。<br>​        <strong>-ge</strong>    检测左边的数是否大于等于右边的，如果是，则返回 true。<br>​        <strong>-le</strong>    检测左边的数是否小于等于右边的，如果是，则返回 true。</p><p>​        <strong>!</strong>    取反运算<br>​        <strong>-o</strong>    或运算<br>​        <strong>-a</strong>    与运算</p><p>​        <strong>&amp;&amp;</strong>    逻辑AND<br>​        <strong>||</strong>        逻辑OR</p><p>​        <strong>-r</strong>     有读的权限（read）<br>​        <strong>-w</strong>     有写的权限（write）<br>​        <strong>-x</strong>     有执行的权限（execute）</p><p>​        <strong>-f</strong>     文件存在并且是一个常规的文件（file）<br>​        <strong>-e</strong>     文件存在（existence）<br>​        <strong>-d</strong>     文件存在并是一个目录（directory）</p><p>​        <strong>使用示例1</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><br>a=1<br>b=2<br>if [ $a -gt $b ]<br>then <br>   echo &quot;$a 大于 $b&quot;<br>else<br>   echo &quot;$a 小于 $b&quot;<br>fi<br>if [ $a -lt 5 -a $b -gt 0 ]<br>then<br>   echo &quot;$a 小于 5 且 $b 大于 0 : 返回 true&quot;<br>else<br>   echo &quot;$a 小于 5 且 $b 大于 0 : 返回 false&quot;<br>fi<br>if [[ $a -lt 5 &amp;&amp; $b -gt 0 ]]<br>then<br>   echo &quot;返回 true&quot;<br>else<br>   echo &quot;返回 false&quot;<br>fi<br></code></pre></td></tr></table></figure><p>​        <strong>使用实例2</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[ 1 -gt 2]<br>echo $? # 1<br><br>[ -e fifth.sh]<br>echo $? # 0<br></code></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>​        格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ 条件判断式 ] <br><span class="hljs-keyword">then</span> <br>程序 <br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>​        <strong>示例</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><br>if [ $1 -eq &quot;1&quot; ]<br>then<br>   echo &quot;You input 1 just now!&quot;<br>else<br>   echo &quot;Your input is not 1!&quot;<br>fi<br></code></pre></td></tr></table></figure><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><p>​        格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">case</span> $变量名 <span class="hljs-keyword">in</span> <br><span class="hljs-string">&quot;值1&quot;</span>） <br>程序 <br>;; <br><span class="hljs-string">&quot;值2&quot;</span>） <br>程序 <br>;; <br>...<br>*)<br>程序<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><p>​        <strong>示例</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;输入 1 到 4 之间的数字:&#x27;<br>echo &#x27;你输入的数字为:&#x27;<br>read aNum<br>case $aNum in<br>    1)  echo &#x27;你选择了 1&#x27;<br>    ;;<br>    2)  echo &#x27;你选择了 2&#x27;<br>    ;;<br>    3)  echo &#x27;你选择了 3&#x27;<br>    ;;<br>    4)  echo &#x27;你选择了 4&#x27;<br>    ;;<br>    *)  echo &#x27;你没有输入 1 到 4 之间的数字&#x27;<br>    ;;<br>esac<br></code></pre></td></tr></table></figure><p>​        (read方法:<br>​        read(选项)(参数)  <strong>选项</strong>：-p：指定读取值时的提示符；-t：指定读取值时等待的时间（秒）<strong>参数</strong> 指定读取值的变量名)</p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>​        格式1：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">for <span class="hljs-comment">(( 初始值;循环控制条件;变量变化 )</span>) <br><span class="hljs-keyword">do</span> <br>程序<br><span class="hljs-keyword">do</span><span class="hljs-symbol">ne</span><br></code></pre></td></tr></table></figure><p>​        格式2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 值1 值2 值3… <br><span class="hljs-keyword">do</span> <br>程序 <br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>​        <strong>示例1</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><br>for i in $*<br>do<br>   printf &quot;参数：$i&quot;<br>done<br></code></pre></td></tr></table></figure><p>​        <strong>示例2</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>s=0<br>for((i=0;i&lt;=100;i++))<br>do<br>        s=$[$s+$i]<br>done<br>echo $s<br></code></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>​        格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> [ 条件判断式 ] <br><span class="hljs-keyword">do</span> <br>程序<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>​        <strong>示例</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><br>s=0<br>i=1<br>while [ $i -le 100 ]<br>do<br>    s=$[$s+$i]<br>    i=$[$i+1]<br>done<br><br>echo $s<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>​        格式：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fortran">[<span class="hljs-function"><span class="hljs-keyword">function</span></span>] funname [()]<br>&#123;<br><span class="hljs-keyword">action</span>;<br>[<span class="hljs-keyword">return</span>  <span class="hljs-built_in">int</span>;]<br>&#125;<br></code></pre></td></tr></table></figure><p>​        <strong>示例</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! /bin/bash</span><br><br>function sum()<br>&#123;<br>    s=0<br>    s=$[ $1 + $2 ]<br>    echo &quot;$s&quot;<br>&#125;<br><br>read -p &quot;Please input the number1: &quot; n1;<br>read -p &quot;Please input the number2: &quot; n2;<br>sum $n1 $n2;<br></code></pre></td></tr></table></figure><p>​        在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><p>​        cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。</p><p>​        <strong>用法</strong>：<br>​        cut [选项参数]  filename<br>​        -f ：提取第几列  -d：分割符</p><p>​        <strong>示例</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cut -d &quot; &quot; -f 1 cut.txt # 剪切cut.txt，以空格分割，提取第一列<br></code></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>​        sort命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。</p><p>​        <strong>用法</strong>：<br>​        sort(选项)(参数)<br>​        -n    数值大小排序<br>​        -r     以相反的顺序排序<br>​        -t    设置排序分割字符<br>​        -k    需要排序的列</p><h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><p>​        sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”，接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非使用重定向存储输出。</p><p>​        <strong>用法</strong>：<br>​        sed [选项参数]  ‘command’  filename<br>​        其中，若command为a，意为新增，a的后面可以接字串，在下一行出现。若command为d，意为删除。若command为s，意为查找并替换。<br>​        更多sed用法，详见<a href="https://www.cnblogs.com/maxincai/p/5146338.html">博客</a>。</p><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>​        文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。</p><p>​        <strong>用法</strong>：<br>​        awk [选项参数]  ‘pattern1{action1} pattern2{action2}…’  filename<br>​        pattern：表示AWK在数据中查找的内容，就是匹配模式<br>​        action：在找到匹配内容时所执行的一系列命令<br>​        更多awk用法，详见<a href="https://www.cnblogs.com/ginvip/p/6352157.html">博客</a>。</p><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>​        Linux grep 命令用于查找文件里符合条件的字符串。</p><p>​        <strong>用法</strong>：<br>​        grep  [选项]  “模式”  [文件]<br>​        选项参数：<br>​        -E ：开启扩展（Extend）的正则表达式。<br>​        -i ：忽略大小写（ignore case）。<br>​        -v ：反过来（invert），只打印没有匹配的，而匹配的反而不打印。<br>​        -n ：显示行号<br>​        -w ：被匹配的文本只能是单词，而不能是单词中的某一部分，如文本中有liker，搜寻的只是like，可以使用-w选项来避免匹配liker<br>​        -c ：显示总共有多少行被匹配到了，而不是显示被匹配到的内容，注意如果同时使用-cv选项是显示有多少行没有被匹配到。<br>​        -o ：只显示被模式匹配到的字符串。<br>​        –color :将匹配到的内容以颜色高亮显示。<br>​        -A  n：显示匹配到的字符串所在的行及其后n行，after<br>​        -B  n：显示匹配到的字符串所在的行及其前n行，before<br>​        -C  n：显示匹配到的字符串所在的行及其前后各n行，context<br>​        模式参数：<br>​        直接输入要匹配的字符串或者使用基本正则表达式<br>​        更多grep用法，详见<a href="https://www.zsythink.net/archives/1733">博客</a>。</p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>​        Shell具有一般的编程语言的很多特点，使用Shell可以实现一定的自动化操作，与之比较相似的编程语言为Python，Shell是运维，大数据等领域的必须要掌握的技术。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法（三）</title>
    <link href="/2022/02/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2022/02/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法（三）"><a href="#数据结构与算法（三）" class="headerlink" title="数据结构与算法（三）"></a>数据结构与算法（三）</h1><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>​        依次遍历数组的各个元素，如果前一个元素大于后一个元素，那么就交换这两个元素的位置。经过一轮遍历后，最大的元素会位于数组尾端，多次重复此过程即可使数组有序排列。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSorting</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; array.length - <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (array[j] &gt; array[j + <span class="hljs-number">1</span>]) &#123;<br>                    temp = array[j];<br>                    array[j] = array[j + <span class="hljs-number">1</span>];<br>                    array[j + <span class="hljs-number">1</span>] = temp;<br>                    flag = <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            flag = <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>​        每次从数组中取出一个元素，放入另一个临时数组中，当向临时数组放入元素时，依次遍历临时数组，直到找到使临时数组有序的插入位置插入此元素。<br><strong>实现方式一</strong>：借助临时数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] insertSorting(<span class="hljs-keyword">int</span>[] array) &#123;<br>        <span class="hljs-keyword">int</span>[] sorted_array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[array.length];<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">int</span> position = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (sorted_array[j] &gt; array[i]) &#123;<br>                    flag = <span class="hljs-keyword">true</span>;<br>                    position = j;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                System.arraycopy(sorted_array, position, sorted_array, position + <span class="hljs-number">1</span>, i - position);<br>                sorted_array[position] = array[i];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                sorted_array[i] = array[i];<br>            &#125;<br>            flag = <span class="hljs-keyword">false</span>;<br>            position = -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sorted_array;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>实现方式二</strong>：在原数组上操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertSorting1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">int</span> position;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; array.length; i++) &#123;<br>            temp = array[i];<br>            position = i - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (position &gt;= <span class="hljs-number">0</span> &amp;&amp; temp &lt; array[position]) &#123;<br>                array[position + <span class="hljs-number">1</span>] = array[position];<br>                position--;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (position + <span class="hljs-number">1</span> != i) &#123;<br>                array[position + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>每次从数组的第i+1个元素到尾端元素取出最小的一个，将其放入数组的第i个的位置即可，其中i从0开始计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectSorting</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">int</span> position;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            position = i;<br>            temp = array[i];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; array.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (temp &gt; array[j]) &#123;<br>                    temp = array[j];<br>                    position = j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (position != i) &#123;<br>                array[position] = array[i];<br>                array[i] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>​        希尔排序的基本思想在于将数组不断分组，对于每次分组后的各个局部数组使用插入排序使其有序。每次分组的各个局部数组相同位置的元素的下标之间的差值都会缩小一倍，直到差值为1退出循环。</p><p><strong>实现方式一</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSorting</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> gap = array.length / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">while</span> (gap &gt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i &lt; array.length; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i - gap; j &gt;= <span class="hljs-number">0</span>; j -= gap) &#123;<br>                    <span class="hljs-keyword">if</span> (array[j] &gt; array[j + gap]) &#123;<br>                        temp = array[j];<br>                        array[j] = array[j + gap];<br>                        array[j + gap] = temp;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            gap = gap / <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>实现方式二</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSorting1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> gap = array.length / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span> (gap &gt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i &lt; array.length; i++) &#123;<br>                <span class="hljs-keyword">int</span> j = i;<br>                <span class="hljs-keyword">int</span> temp = array[j];<br>                <span class="hljs-keyword">if</span> (array[j] &lt; array[j - gap]) &#123;<br>                    <span class="hljs-keyword">while</span> (j - gap &gt;= <span class="hljs-number">0</span> &amp;&amp; temp &lt; array[j - gap]) &#123;<br>                        array[j] = array[j - gap];<br>                        j -= gap;<br>                    &#125;<br>                    array[j] = temp;<br>                &#125;<br>            &#125;<br>            gap = gap / <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法（二）</title>
    <link href="/2022/02/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/02/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法（二）"><a href="#数据结构与算法（二）" class="headerlink" title="数据结构与算法（二）"></a>数据结构与算法（二）</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈是一种先入后出的有序列表，它只允许在一端进行插入与删除，此端称为栈顶，另一端称为栈底。使用数组模拟栈：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayStack</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> stack_length;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] stack_array;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> point;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayStack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> stack_length)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.stack_length = stack_length;<br>        <span class="hljs-keyword">this</span>.point = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">this</span>.stack_array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[stack_length];<br>    &#125;<br><br>    <span class="hljs-comment">// 栈满</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> point == stack_length - <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 栈空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> point == -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 入栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The stack is full now!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">this</span>.point ++;<br>        stack_array[point] = num;<br>    &#125;<br><br>    <span class="hljs-comment">// 出栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;The stack is empty now!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack_array[<span class="hljs-keyword">this</span>.point --];<br>    &#125;<br><br>    <span class="hljs-comment">// 显示数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show_all_data</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The stack is empty now!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= point; i++) &#123;<br>            System.out.println(stack_array[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用栈制作计算器（中缀表达式）：<br>中缀表达式就是人进行计算使用的计算式的形式，例如10+10*20-20</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalculatorViaStack</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String formula = <span class="hljs-string">&quot;10+10*20-20&quot;</span>;<br>        Stack&lt;Integer&gt; num_stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        Stack&lt;String&gt; ope_stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        String temp;<br>        <span class="hljs-keyword">int</span> result;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; formula.length(); i++) &#123;<br>            temp = formula.substring(i, i + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (isOperator(temp)) &#123;<br>                <span class="hljs-keyword">if</span> (ope_stack.size() != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (!isPriority(temp, ope_stack.peek())) &#123;<br>                        num_stack.push(calculate(ope_stack.pop(), num_stack.pop(), num_stack.pop()));<br>                    &#125;<br>                &#125;<br>                ope_stack.push(temp);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">while</span> ((i + <span class="hljs-number">2</span>) &lt;= formula.length() &amp;&amp; !isOperator(formula.substring(i + <span class="hljs-number">1</span>, i + <span class="hljs-number">2</span>))) &#123;<br>                    temp += formula.substring(i + <span class="hljs-number">1</span>, i + <span class="hljs-number">2</span>);<br>                    i++;<br>                &#125;<br>                num_stack.push(Integer.parseInt(temp));<br>            &#125;<br>        &#125;<br>        result = calculate(ope_stack.pop(), num_stack.pop(), num_stack.pop());<br>        <span class="hljs-keyword">while</span> (ope_stack.size() != <span class="hljs-number">0</span>) &#123;<br>            result = calculate(ope_stack.pop(), num_stack.pop(), result);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;The result is &quot;</span> + result);<br>    &#125;<br><br>    <span class="hljs-comment">// 是否是运算符</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isOperator</span><span class="hljs-params">(String ope)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (ope.equals(<span class="hljs-string">&quot;*&quot;</span>)) || (ope.equals(<span class="hljs-string">&quot;/&quot;</span>)) || (ope.equals(<span class="hljs-string">&quot;+&quot;</span>)) || (ope.equals(<span class="hljs-string">&quot;-&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 运算符优先级</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPriority</span><span class="hljs-params">(String ope1, String ope2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (ope1.equals(<span class="hljs-string">&quot;*&quot;</span>) || ope1.equals(<span class="hljs-string">&quot;/&quot;</span>)) &amp;&amp; ((ope2.equals(<span class="hljs-string">&quot;+&quot;</span>) || ope2.equals(<span class="hljs-string">&quot;-&quot;</span>)));<br>    &#125;<br><br>    <span class="hljs-comment">// 运算符计算</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(String ope, <span class="hljs-keyword">int</span> num2, <span class="hljs-keyword">int</span> num1)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!isOperator(ope)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Illegal operator！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">switch</span> (ope) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>                <span class="hljs-keyword">return</span> num1 * num2;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>                <span class="hljs-keyword">return</span> num1 / num2;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>                <span class="hljs-keyword">return</span> num1 + num2;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> num1 - num2;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用栈制作计算器（后缀表达式）：<br>后缀表达式便于计算机计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalculatorByPostfix</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String express = <span class="hljs-string">&quot;1+((20+3)*4)-5&quot;</span>;<br>        String[] strings = getPostfix(express);<br>        <span class="hljs-keyword">for</span> (String string : strings) &#123;<br>            System.out.println(string);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;The result is &quot;</span> + calculate_postfix(strings));<br>    &#125;<br><br>    <span class="hljs-comment">// 计算后缀表达式</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate_postfix</span><span class="hljs-params">(String[] postfix_array)</span> </span>&#123;<br>        Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String s : postfix_array) &#123;<br>            <span class="hljs-keyword">if</span> (isOperator(s)) &#123;<br>                stack.push(calculate(s, stack.pop(), stack.pop()));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                stack.push(Integer.parseInt(s));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.pop();<br>    &#125;<br><br>    <span class="hljs-comment">// 中缀表达式转后缀表达式</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] getPostfix(String express) &#123;<br>        Stack&lt;String&gt; transition_stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        Stack&lt;String&gt; result_stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        String temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; express.length(); i++) &#123;<br>            temp = express.substring(i, i + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (isOperator(temp)) &#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (transition_stack.size() == <span class="hljs-number">0</span> || transition_stack.peek().equals(<span class="hljs-string">&quot;(&quot;</span>)) &#123;<br>                        transition_stack.push(temp);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isPriority(temp, transition_stack.peek())) &#123;<br>                        transition_stack.push(temp);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        result_stack.push(transition_stack.pop());<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (temp.equals(<span class="hljs-string">&quot;(&quot;</span>)) &#123;<br>                    transition_stack.push(temp);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.equals(<span class="hljs-string">&quot;)&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">while</span> (!transition_stack.peek().equals(<span class="hljs-string">&quot;(&quot;</span>)) &#123;<br>                        result_stack.push(transition_stack.pop());<br>                    &#125;<br>                    transition_stack.pop();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">while</span> ((i + <span class="hljs-number">2</span>) &lt;= express.length() &amp;&amp; !isOperator(express.substring(i + <span class="hljs-number">1</span>, i + <span class="hljs-number">2</span>)) &amp;&amp; express.charAt(i + <span class="hljs-number">1</span>) != <span class="hljs-string">&#x27;(&#x27;</span> &amp;&amp; express.charAt(i + <span class="hljs-number">1</span>) != <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>                        temp += express.substring(i + <span class="hljs-number">1</span>, i + <span class="hljs-number">2</span>);<br>                        i++;<br>                    &#125;<br>                    result_stack.push(temp);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (transition_stack.size() != <span class="hljs-number">0</span>) &#123;<br>            result_stack.push(transition_stack.pop());<br>        &#125;<br>        String[] postfix_array = <span class="hljs-keyword">new</span> String[result_stack.size()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = result_stack.size() - <span class="hljs-number">1</span>; i &gt; -<span class="hljs-number">1</span>; i--) &#123;<br>            postfix_array[i] = result_stack.pop();<br>        &#125;<br>        <span class="hljs-keyword">return</span> postfix_array;<br>    &#125;<br><br>    <span class="hljs-comment">// 运算符优先级</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPriority</span><span class="hljs-params">(String ope1, String ope2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (ope1.equals(<span class="hljs-string">&quot;*&quot;</span>) || ope1.equals(<span class="hljs-string">&quot;/&quot;</span>)) &amp;&amp; ((ope2.equals(<span class="hljs-string">&quot;+&quot;</span>) || ope2.equals(<span class="hljs-string">&quot;-&quot;</span>)));<br>    &#125;<br><br>    <span class="hljs-comment">// 是否是运算符</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isOperator</span><span class="hljs-params">(String ope)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (ope.equals(<span class="hljs-string">&quot;*&quot;</span>)) || (ope.equals(<span class="hljs-string">&quot;/&quot;</span>)) || (ope.equals(<span class="hljs-string">&quot;+&quot;</span>)) || (ope.equals(<span class="hljs-string">&quot;-&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 运算符计算</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(String ope, <span class="hljs-keyword">int</span> num2, <span class="hljs-keyword">int</span> num1)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!isOperator(ope)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Illegal operator！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">switch</span> (ope) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>                <span class="hljs-keyword">return</span> num1 * num2;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>                <span class="hljs-keyword">return</span> num1 / num2;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>                <span class="hljs-keyword">return</span> num1 + num2;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> num1 - num2;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归是方法自己调用自己，有助于将复杂的问题变简单。递归每调用一次，就创建一个存放方法的栈空间，每个方法的局部变量都是独立的。递归必须向退出递归的方向逼近。<br>使用递归解决迷宫问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FindWayByRecursion</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[][] maze = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, <br>                        &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, <br>                        &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;,<br>                        &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;&#125;;<br>        <span class="hljs-keyword">boolean</span> way = findWay(maze, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (way) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; maze.length; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; maze[<span class="hljs-number">0</span>].length; j++) &#123;<br>                    System.out.print(maze[i][j]);<br>                &#125;<br>                System.out.println();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">findWay</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] maze, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (maze[<span class="hljs-number">6</span>][<span class="hljs-number">6</span>] == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (maze[i][j] == <span class="hljs-number">0</span>) &#123;<br>                maze[i][j] = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span> (findWay(maze, i, j + <span class="hljs-number">1</span>)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(maze, i + <span class="hljs-number">1</span>, j)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(maze, i, j - <span class="hljs-number">1</span>)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(maze, i - <span class="hljs-number">1</span>, j)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    maze[i][j] = <span class="hljs-number">3</span>;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法（一）</title>
    <link href="/2022/01/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/01/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法（一）"><a href="#数据结构与算法（一）" class="headerlink" title="数据结构与算法（一）"></a>数据结构与算法（一）</h1><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><p>稀疏数组是指一个数组中有许多重复的值，例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>可以将其记为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">11</span> <span class="hljs-number">11</span> <span class="hljs-number">2</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">2</span> <span class="hljs-number">1</span><br> <span class="hljs-attribute">2</span>  <span class="hljs-number">4</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>这样就减少了存储空间。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SparseArray</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[][] test_array =  <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>];<br>        test_array[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br>        test_array[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">9</span>;<br><br>        <span class="hljs-keyword">int</span>[][] change_array = change_array(test_array);<br>        System.out.println(Arrays.deepToString(change_array));<br><br>        <span class="hljs-keyword">int</span>[][] restore_array = restore_array(change_array);<br>        System.out.println(Arrays.deepToString(restore_array));<br>    &#125;<br><br>    <span class="hljs-comment">// 压缩数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[][] change_array(<span class="hljs-keyword">int</span>[][] sparse_array) &#123;<br>        <span class="hljs-keyword">int</span> row = sparse_array.length;<br>        <span class="hljs-keyword">int</span> col = sparse_array[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; row; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; col; j++) &#123;<br>                <span class="hljs-keyword">if</span> (sparse_array[i][j] != <span class="hljs-number">0</span>) &#123;<br>                    sum ++;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span>[][] aim_array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[sum + <span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br>        aim_array[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = row;<br>        aim_array[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = col;<br>        aim_array[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sum;<br>        sum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; row; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; col; j++) &#123;<br>                <span class="hljs-keyword">if</span> (sparse_array[i][j] != <span class="hljs-number">0</span>) &#123;<br>                    sum ++;<br>                    aim_array[sum][<span class="hljs-number">0</span>] = i;<br>                    aim_array[sum][<span class="hljs-number">1</span>] = j;<br>                    aim_array[sum][<span class="hljs-number">2</span>] = sparse_array[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> aim_array;<br>    &#125;<br><br>    <span class="hljs-comment">// 还原数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[][] restore_array(<span class="hljs-keyword">int</span>[][] changed_array) &#123;<br>        <span class="hljs-keyword">int</span>[][] original_array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[changed_array[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][changed_array[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= changed_array[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]; i++) &#123;<br>            original_array[changed_array[i][<span class="hljs-number">0</span>]][changed_array[i][<span class="hljs-number">1</span>]] = changed_array[i][<span class="hljs-number">2</span>];<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> original_array;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列是一种线性表结构，遵循先入先出原则。通过数组模拟队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayQueue</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> head_pointer = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> end_pointer = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] array_queue;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.array_queue = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[size + <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 队列是否空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> head_pointer == end_pointer;<br>    &#125;<br><br>    <span class="hljs-comment">// 队列是否满</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (end_pointer + <span class="hljs-number">1</span>) % array_queue.length == head_pointer;<br>    &#125;<br><br>    <span class="hljs-comment">// 添加数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add_data</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Now the queue is full!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        array_queue[end_pointer] = data;<br>        end_pointer = (end_pointer + <span class="hljs-number">1</span>) % array_queue.length;<br>    &#125;<br><br>    <span class="hljs-comment">// 取出数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get_data</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Now the queue is empty!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">int</span> temp = head_pointer;<br>        head_pointer = (head_pointer + <span class="hljs-number">1</span>) % array_queue.length;<br>        <span class="hljs-keyword">return</span> array_queue[temp];<br>    &#125;<br><br>    <span class="hljs-comment">// 获取全部数据信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] get_all_data() &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Now the queue is empty!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">int</span> real_size = (end_pointer + array_queue.length - head_pointer) %                  array_queue.length;<br>        <span class="hljs-keyword">int</span>[] aim_queue = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[real_size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; real_size; i++) &#123;<br>            aim_queue[i] = array_queue[(head_pointer + i) % array_queue.length];<br>        &#125;<br>        <span class="hljs-keyword">return</span> aim_queue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表是一种有序的列表，它以节点的方式来存储，每个节点包含数据和下一个节点的位置，链表的节点并不一定是顺序存储的。</p><p>实现单向链表:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> LinkedListNode head_node = <span class="hljs-keyword">new</span> LinkedListNode(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-comment">// 添加节点至结尾</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addDataToEnd</span><span class="hljs-params">(LinkedListNode node)</span> </span>&#123;<br>        LinkedListNode temp = head_node;<br>        <span class="hljs-keyword">while</span> (temp.next != <span class="hljs-keyword">null</span>) &#123;<br>            temp = temp.next;<br>        &#125;<br>        temp.next = node;<br>    &#125;<br><br>    <span class="hljs-comment">// 顺序添加节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addDataByOrder</span><span class="hljs-params">(LinkedListNode node)</span> </span>&#123;<br>        LinkedListNode temp = head_node;<br>        <span class="hljs-keyword">while</span> (temp.next != <span class="hljs-keyword">null</span> &amp;&amp; temp.next.serial_number &lt; node.serial_number) &#123;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (temp.next != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (node.serial_number == temp.serial_number) &#123;<br>                System.out.println(<span class="hljs-string">&quot;The same element exists!&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            node.next = temp.next;<br>            temp.next = node;<br>        &#125;<br>        temp.next = node;<br>    &#125;<br><br>    <span class="hljs-comment">// 修改节点信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modifyNodeInfo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial_number, String info)</span> </span>&#123;<br>        LinkedListNode node = getSpecialNode(serial_number);<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        node.info = info;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial_number)</span> </span>&#123;<br>        LinkedListNode temp = head_node;<br>        <span class="hljs-keyword">while</span> (temp.next.next != <span class="hljs-keyword">null</span> &amp;&amp; temp.next.serial_number != serial_number) &#123;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (temp.next.next == <span class="hljs-keyword">null</span> &amp;&amp; temp.next.serial_number != serial_number) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Cannot find the element!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.next.next != <span class="hljs-keyword">null</span>) &#123;<br>            temp.next = temp.next.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            temp.next = <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示链表信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showLinkedList</span><span class="hljs-params">()</span> </span>&#123;<br>        LinkedListNode temp = head_node.next;<br>        <span class="hljs-keyword">while</span> (temp != <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(temp);<br>            temp = temp.next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 查找指定节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> LinkedListNode <span class="hljs-title">getSpecialNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial_number)</span> </span>&#123;<br>        LinkedListNode temp = head_node;<br>        <span class="hljs-keyword">while</span> (temp.next != <span class="hljs-keyword">null</span> &amp;&amp; temp.serial_number != serial_number) &#123;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span> &amp;&amp; temp.serial_number != serial_number) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Cannot find the element!&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedListNode</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> serial_number;<br>    <span class="hljs-keyword">public</span> String info;<br>    <span class="hljs-keyword">public</span> LinkedListNode next;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkedListNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial_number, String info)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.serial_number = serial_number;<br>        <span class="hljs-keyword">this</span>.info = info;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;serial_number: &quot;</span> + serial_number + <span class="hljs-string">&quot;, info: &quot;</span> + info;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现双向链表:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleLinkedList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> DoubleLinkedListNode head_node = <span class="hljs-keyword">new</span> DoubleLinkedListNode(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-comment">// 顺序添加节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addNodeByOrder</span><span class="hljs-params">(DoubleLinkedListNode node)</span> </span>&#123;<br>        DoubleLinkedListNode temp = head_node;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp.serial_number == node.serial_number) &#123;<br>                System.out.println(<span class="hljs-string">&quot;The same element has existed!&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.serial_number &gt; node.serial_number) &#123;<br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!flag) &#123;<br>            temp.next = node;<br>            node.pre = temp;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        temp.pre.next = node;<br>        node.next = temp;<br>        node.pre = temp.pre;<br>        temp.pre = node;<br>    &#125;<br><br>    <span class="hljs-comment">// 修改节点信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modifyInfo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial_number, String info)</span> </span>&#123;<br>        DoubleLinkedListNode specialNode = getSpecialNode(serial_number);<br>        <span class="hljs-keyword">if</span> (specialNode == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Cannot find designated node!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        specialNode.info = info;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial_number)</span> </span>&#123;<br>        DoubleLinkedListNode specialNode = getSpecialNode(serial_number);<br>        <span class="hljs-keyword">if</span> (specialNode == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Cannot find designated node!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (specialNode.next == <span class="hljs-keyword">null</span>) &#123;<br>            specialNode.pre.next = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        specialNode.pre.next = specialNode.next;<br>        specialNode.next.pre = specialNode.pre;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示链表信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getListInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        DoubleLinkedListNode temp = head_node;<br>        <span class="hljs-keyword">while</span> (temp.next != <span class="hljs-keyword">null</span>) &#123;<br>            temp = temp.next;<br>            System.out.println(temp);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 查找指定节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DoubleLinkedListNode <span class="hljs-title">getSpecialNode</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> serial_number)</span> </span>&#123;<br>        DoubleLinkedListNode temp = head_node;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp.serial_number == serial_number) &#123;<br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-keyword">return</span> temp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleLinkedListNode</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> serial_number;<br>    <span class="hljs-keyword">public</span> String info;<br>    <span class="hljs-keyword">public</span> DoubleLinkedListNode next;<br>    <span class="hljs-keyword">public</span> DoubleLinkedListNode pre;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DoubleLinkedListNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> serial_number, String info)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.serial_number = serial_number;<br>        <span class="hljs-keyword">this</span>.info = info;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;serial_number: &quot;</span> + serial_number + <span class="hljs-string">&quot;, info: &quot;</span> + info;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Javascript搭建聊天室</title>
    <link href="/2022/01/27/%E4%BD%BF%E7%94%A8Javascript%E6%90%AD%E5%BB%BA%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <url>/2022/01/27/%E4%BD%BF%E7%94%A8Javascript%E6%90%AD%E5%BB%BA%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>程序主体使用Javascript编写，用到了Nodejs，express和Peerjs等Javascript库，所以需要对Javascript有一定的了解。Javascript是一种非常简单的脚本语言，可以用来控制网页交互，做服务器后台，制作桌面端软件与安卓app，甚至可以用于机器学习。</p><h1 id="WebRTC与Peerjs"><a href="#WebRTC与Peerjs" class="headerlink" title="WebRTC与Peerjs"></a>WebRTC与Peerjs</h1><p>WebRTC，名称源自网页即时通信（英语：Web Real-Time Communication）的缩写，是一个支持网页浏览器进行实时语音对话或视频对话的API。它于2011年6月1日开源并在Google、Mozilla、Opera支持下被纳入万维网联盟的W3C推荐标准。通俗一点讲，WebRTC为网页端视频通话提供了接口，使开发者能够在浏览器上更简单的开发视频通话功能。Peerjs是对WebRTC的进一步封装，实现了真正的浏览器上的点对点数据通讯，使用起来也更加简单。</p><h1 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h1><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><p>在安装依赖包之前确保已经安装了Node，检查方法：命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">node -v<br></code></pre></td></tr></table></figure><p>安装express依赖包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install express<br></code></pre></td></tr></table></figure><p>安装Peerjs(使用本地信令服务器)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install peer<br></code></pre></td></tr></table></figure><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>使用Peerjs首先需要一个信令服务器用于连接两个客户端，你可以使用自己的本地信令服务器，也可以使用Peerjs提供的云端信令服务器。搭建自己的信令服务器非常简单，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">var</span> PeerServer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;peer&#x27;</span>).PeerServer;<br> <br><span class="hljs-keyword">var</span> server = PeerServer(&#123;<br>  <span class="hljs-attr">port</span>: <span class="hljs-number">8090</span>,<br>  <span class="hljs-attr">ssl</span>: &#123;<br>  <span class="hljs-attr">key</span>: fs.readFileSync(<span class="hljs-string">&#x27;../certificates/server.key&#x27;</span>),<br>  <span class="hljs-attr">cert</span>: fs.readFileSync(<span class="hljs-string">&#x27;../certificates/server.crt&#x27;</span>)<br>&#125;,<br>  <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/peerjs&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>如果使用Peerjs提供的云端信令服务器，只需在html文件中引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着搭建在线用户查询服务器，服务代码使用Nodejs编写，主要功能为提供网页数据，提供在线成员信息，为每个成员生成唯一id。这些功能对于Peerjs来说这些是非必需的，你也可以跳过此步骤。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">var</span> app = express();<br><br><span class="hljs-comment">// 存储用户信息</span><br><span class="hljs-keyword">let</span> p = &#123;<br>  <span class="hljs-string">&quot;admin&quot;</span>: <span class="hljs-number">111111</span>,<br>&#125;<br><br><span class="hljs-comment">// 生成6位id</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getID</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> Num = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>    Num += <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> Num;<br>&#125;<br><br><span class="hljs-comment">// 解决express跨域问题</span><br>app.all(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.header(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<br>  res.header(<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="hljs-string">&#x27;Content-Type, Content-Length, Authorization, Accept, X-Requested-With&#x27;</span>);<br>  res.header(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="hljs-string">&#x27;PUT, POST, GET, DELETE, OPTIONS&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (req.method == <span class="hljs-string">&#x27;OPTIONS&#x27;</span>) &#123;<br>    res.send(<span class="hljs-number">200</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;<br>    next();<br>  &#125;<br>&#125;);<br><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  fs.readFile(<span class="hljs-string">&#x27;./index.html&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.stack)<br>    &#125;<br>    res.send(data.toString())<br>    res.end()<br>  &#125;)<br>&#125;)<br><br>app.get(<span class="hljs-string">&#x27;/register/:name&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  user_arr = <span class="hljs-built_in">Object</span>.keys(p);<br>  <span class="hljs-keyword">if</span> (user_arr.includes(req.params.name)) &#123;<br>    res.writeHead(<span class="hljs-string">&#x27;412&#x27;</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span> &#125;)<br>    res.end(<span class="hljs-string">&#x27;The name has been used!&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">const</span> myID = getID()<br>    p[req.params.name] = myID;<br>    res.writeHead(<span class="hljs-string">&#x27;200&#x27;</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span> &#125;)<br>    res.write(myID);<br>    res.end()<br>  &#125;<br>&#125;)<br><br>app.get(<span class="hljs-string">&#x27;/getAllUser&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.writeHead(<span class="hljs-string">&#x27;200&#x27;</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span> &#125;)<br>  res.write(<span class="hljs-built_in">JSON</span>.stringify(p));<br>  res.end()<br>&#125;)<br><br>app.get(<span class="hljs-string">&#x27;/getSpecialUser/:name&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  user_arr = <span class="hljs-built_in">Object</span>.keys(p);<br>  <span class="hljs-keyword">if</span> (user_arr.includes(req.params.name)) &#123;<br>    aim = p[req.params.name]<br>    res.writeHead(<span class="hljs-string">&#x27;200&#x27;</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span> &#125;)<br>    res.write(aim);<br>    res.end()<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.writeHead(<span class="hljs-string">&#x27;404&#x27;</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span> &#125;)<br>    res.write(<span class="hljs-string">&#x27;Can not find the user!&#x27;</span>)<br>    res.end<br>  &#125;<br><br>&#125;)<br><br>app.listen(<span class="hljs-number">8080</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;The application is running on http://localhost:8080&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h2><p>网页的html与css代码非常简单，没有用到任何框架。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>let&#x27;s chat!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.title</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.message_me</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">text-align</span>: right;</span><br><span class="css">      <span class="hljs-attribute">color</span>: bisque;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-id">#chatSpace</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">90vh</span>;</span><br><span class="css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">205</span>, <span class="hljs-number">211</span>, <span class="hljs-number">211</span>);</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.message_system</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">      <span class="hljs-attribute">color</span>: darkgreen;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.message_other</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">text-align</span>: left;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-id">#online_user</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">float</span>: left;</span><br><span class="css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">25vh</span>;</span><br><span class="css">      <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.video_left</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">      <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">250px</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.video_right</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">      <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">250px</span>;</span><br><span class="css">    &#125;</span><br><span class="css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>let&#x27;s chat!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: right;&quot;</span>&gt;</span><br>      my name:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myName&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;register&quot;</span>&gt;</span>register<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      target name:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;targetName&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">HR</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;online_user&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>当前在线：<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUser&quot;</span>&gt;</span>refresh<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;chatSpace&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span>Chat Record<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;send_msg&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;connect&quot;</span>&gt;</span>send<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;video&quot;</span>&gt;</span>video call<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;videoSpace&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">// 主要功能代码...</span></span><br><span class="javascript">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>主要功能代码的流程为注册名字，建立peer连接，发送消息与视频聊天。<br><strong>注册名字</strong>：点击register按钮后，向服务器发送myName输入框的值，获取服务器返回的6位id。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用XMLHttpRequest发送请求</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createXHR</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-keyword">var</span> XHR = [<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> XMLHttpRequest() &#125;,<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Msxml2.XMLHTTP&quot;</span>) &#125;,<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Msxml3.XMLHTTP&quot;</span>) &#125;,<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>) &#125;<br>     ];<br>     <span class="hljs-keyword">var</span> xhr = <span class="hljs-literal">null</span>;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; XHR.length; i++) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>         xhr = XHR[i]();<br>       &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>         <span class="hljs-keyword">continue</span><br>       &#125;<br>       <span class="hljs-keyword">break</span>;<br>     &#125;<br>     <span class="hljs-keyword">return</span> xhr;<br>   &#125;<br><br><span class="hljs-comment">// 获取id</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUserID</span>(<span class="hljs-params">name</span>) </span>&#123;<br>     <span class="hljs-keyword">var</span> xhr = createXHR();<br>     xhr.open(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;http://localhost:8080/getSpecialUser/&quot;</span> + name, <span class="hljs-literal">false</span>);<br>     xhr.send(<span class="hljs-literal">null</span>);<br>     <span class="hljs-keyword">if</span> (xhr.status == <span class="hljs-number">412</span>) &#123;<br>       alert(xhr.responseText);<br>       <span class="hljs-keyword">return</span>;<br>     &#125;<br>     <span class="hljs-keyword">return</span> xhr.responseText;<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>建立peer连接</strong>(peer.on(…) 使用事件驱动模型，每当条件满足就触发回调函数)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> peer = <span class="hljs-keyword">new</span> Peer(xhr.responseText);<br><br><span class="hljs-comment">// 连接成功触发</span><br>peer.on(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">id</span>) </span>&#123;<br>  chatSpace.innerHTML += <span class="hljs-string">&quot;&lt;div class=&#x27;message_system&#x27;&gt;system : register success &quot;</span> + id + <span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>;<br>  &#125;);<br><br><span class="hljs-comment">// 接收消息触发</span><br>peer.on(<span class="hljs-string">&#x27;connection&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">conn1</span>) =&gt;</span> &#123;<br>  conn1.on(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> msg = <span class="hljs-built_in">JSON</span>.parse(data);<br>  &#125;<br>  chatSpace.innerHTML += <span class="hljs-string">&quot;&lt;div class=&#x27;message_other&#x27;&gt;&quot;</span> + msg.from + <span class="hljs-string">&quot; : &quot;</span> + msg.body + <span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>;<br>  <span class="hljs-keyword">if</span> (targetName.value.length == <span class="hljs-number">0</span>) &#123;<br>    targetName.value = msg.from;<br>  &#125;   <br>&#125;<br> <br>          <br></code></pre></td></tr></table></figure><p><strong>发送消息：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建到对方的连接</span><br>conn = peer.connect(getUserID(targetName.value));<br><span class="hljs-comment">// 发送消息</span><br>conn.send(<span class="hljs-built_in">JSON</span>.stringify(message));<br>chatSpace.innerHTML += <span class="hljs-string">&quot;&lt;div class=&#x27;message_me&#x27;&gt;&quot;</span> + message.from + <span class="hljs-string">&quot; : &quot;</span> + message.body + <span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>;<br>send_msg.value = <span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>视频聊天：</strong><br>开启摄像头：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 将摄像头视频流赋值给localVideo</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gotLocalMediaStream</span>(<span class="hljs-params">mediaStream</span>) </span>&#123;<br>  localVideo = mediaStream;<br>  myVideo.srcObject = mediaStream;<br>  &#125;<br><br><span class="hljs-keyword">const</span> mediaStreamConstraints = &#123;<br>   <span class="hljs-attr">video</span>: &#123;<br>     <span class="hljs-attr">height</span>: &#123;<br>       <span class="hljs-attr">min</span>: <span class="hljs-number">250</span><br>     &#125;<br>    &#125;<br>  &#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleLocalMediaStreamError</span>(<span class="hljs-params">error</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;navigator.getUserMedia error: &#x27;</span>, error);<br>  &#125;<br><br><span class="hljs-comment">//开启本地摄像头</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">start</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) &#123;<br>    alert(<span class="hljs-string">&quot;webrtc is not supported!&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>    &#125;<br>  navigator.mediaDevices.getUserMedia(mediaStreamConstraints)<br>    .then(gotLocalMediaStream).catch(handleLocalMediaStreamError);<br>    &#125;<br></code></pre></td></tr></table></figure><p>发起视频：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">videoSpace.innerHTML = <span class="hljs-string">&#x27;&lt;video id=&quot;localVideo&quot; autoplay controls class=&quot;video_left&quot;&gt;&lt;/video&gt;&lt;video id=&quot;remoteVideo&quot; autoplay controls class=&quot;video_right&quot;&gt;&lt;/video&gt;&#x27;</span><br>myVideo = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;video#localVideo&#x27;</span>);<br>remoteVideo = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;video#remoteVideo&#x27;</span>);<br>start()<br><span class="hljs-keyword">var</span> test = <span class="hljs-literal">null</span>;<br>navigator.mediaDevices.getUserMedia(mediaStreamConstraints)<br>.then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">stream</span>) </span>&#123;<br>   test = stream;<br>   <span class="hljs-keyword">var</span> call_me = peer.call(getUserID(msg.from), test);<br>   call_me.on(<span class="hljs-string">&#x27;stream&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">stream</span>) </span>&#123;<br>     remoteVideo.srcObject = stream;<br>     &#125;);<br>   &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>&#123;<br>      <span class="hljs-comment">// do something</span><br>     &#125;);<br></code></pre></td></tr></table></figure><p>接受视频：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> call = peer.call(getUserID(msg.from), localVideo);<br>remoteVideo = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;video#remoteVideo&#x27;</span>);<br>call.on(<span class="hljs-string">&#x27;stream&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">stream</span>) </span>&#123;<br>  remoteVideo.srcObject = stream;<br>&#125;)<br></code></pre></td></tr></table></figure><p>当收到call请求时，需要返回自己本地的视频流：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">peer.on(<span class="hljs-string">&#x27;call&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">call</span>) </span>&#123;<br>  call.answer(localVideo);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>比较关键的代码就是这些，完整代码已上传<a href="https://gitee.com/tprocess/chat-demo">Gitee</a>。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>WebRTC实现了两个浏览器之间直接进行视频和音频的通信，不经过服务器，这在一定程度上保证了信息安全，对于从事音视频开发的开发者来说，WebRTC是非常重要的开源库。</p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>nodejs</tag>
      
      <tag>express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程编程</title>
    <link href="/2022/01/19/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/01/19/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是多线程"><a href="#什么是多线程" class="headerlink" title="什么是多线程"></a>什么是多线程</h1><p>线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元。与线程十分类似的概念还有进程，进程可以看做正在运行的程序，一个进程可以有多个线程。我们知道一般CPU都有多个核心，支持并行操作，使用多线程可以充分利用CPU的计算能力，同时提升程序运行速度。不同线程间资源可以共享，CPU在不同线程间的切换速度也非常快。</p><h1 id="在Java中创建线程"><a href="#在Java中创建线程" class="headerlink" title="在Java中创建线程"></a>在Java中创建线程</h1><h2 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h2><p>Thread类是Java的内置类，我们可以继承Thread类重写其中的run()方法，使用start()方法来开启线程，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是新的子线程&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>在main函数中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    TestThread thread = <span class="hljs-keyword">new</span> TestThread();<br>    thread.start();<br>    System.out.println(<span class="hljs-string">&quot;我是main线程&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h2><p>Runnable接口需要实现其中的run()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;我是新的子线程&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在main函数中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    TestThread thread = <span class="hljs-keyword">new</span> TestThread();<br>    thread.start();<br>    System.out.println(<span class="hljs-string">&quot;我是main线程&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>上述两种方法都可以开启多个线程，只要我们创建多个对象就可以。一般我们使用实现Runnable接口的方式来创建子线程，因为Java中类只能单继承，也就是说一个类只能有一个父类，实现Runnable方法就可以避免这个问题。<br>在Java中，每一个线程都有自己的名字，可以手动指定，也可以由Java自动生成，可以使用<code>Thread.currentThread()</code>来获取当前线程。线程的执行顺序是无法确定的，我们只能确定每一个线程都会被执行直到结束，一个线程只执行一次</p><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><p>每一个线程在生命周期内都会经历5个状态：新建、可运行、运行、阻塞、死亡。</p><ul><li>新建：线程已被创建，还未被调用。</li><li>可运行：线程准备运行，但系统还未选定它为运行线程。</li><li>运行：线程正在执行。</li><li>阻塞：线程可被运行，但当前并未运行，当其他线程释放，可进入运行状态。</li><li>死亡：线程运行结束。</li></ul><p>在线程中使用<code>Thread.sleep(long millis)</code>可以使线程进入休眠状态，在休眠状态中线程不会被调用；使用<code>Thread.yield()</code>方法来使当前线程退出；使用<code>join()</code>方法使一个线程排到另外一个线程尾部。</p><h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><p>当多个线程访问同一个资源，如果不加以处理，往往会出现问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(TestThread.i--);<br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">100</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    TestThread thread1 = <span class="hljs-keyword">new</span> TestThread();<br>    TestThread thread2 = <span class="hljs-keyword">new</span> TestThread();<br>    thread1.start();<br>    thread2.start();<br>    &#125;<br></code></pre></td></tr></table></figure><p>执行上述代码就会发现每次执行的结果都不一样，可能有的数字会出现多次，位置也无法预测。<br>我们可以通过加锁来解决这个问题。可以在方法上加锁，使用synchronized修饰：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">temp</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(TestThread.i--);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        temp();<br>    &#125;<br></code></pre></td></tr></table></figure><p>手动上锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        lock.lock();<br>        System.out.println(TestThread.i--);<br>        lock.unlock();<br>    &#125;<br></code></pre></td></tr></table></figure><p>当一个类已经很好的同步以保护它的数据时，这个类就称为“线程安全的”。<br>线程死锁：当两个线程被阻塞，每个线程在等待另一个线程时就发生死锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Runnable r1 = () -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;A&quot;</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;A线程持有A锁, 等待B锁&quot;</span>);<br>                <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;B&quot;</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;A线程持同时持有A锁和B锁&quot;</span>);<br> <br>                &#125;<br>            &#125;<br>        &#125;;<br>        Runnable r2 = () -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;B&quot;</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;B线程持有B锁, 等待A锁&quot;</span>);<br>                <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;A&quot;</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;B线程持同时持有A锁和B锁&quot;</span>);<br> <br>                &#125;<br>            &#125;<br>        &#125;;<br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(r1);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(r2);<br>        t1.start();<br>        t2.start();<br> <br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>Java中关于多线程和锁的知识还有很多，我们之后再介绍。不得不说锁的使用还是比较复杂的，不过它的功能也很强大，用好多线程可以使我们的程序效率高，健壮性好。下一篇会是关于Javascript中的webRTC的相关内容(或者是Unity)，个人觉得还是相当好玩的，欢迎各位持续关注。</p>]]></content>
    
    
    <categories>
      
      <category>Java语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建自己的博客网站</title>
    <link href="/2022/01/15/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <url>/2022/01/15/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>在开始搭建博客之前，需要检查环境是否符合以下要求：</p><h2 id="Node环境："><a href="#Node环境：" class="headerlink" title="Node环境："></a>Node环境：</h2><p>打开电脑命令行工具，输入以下命令</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs js">node -v<br></code></pre></td></tr></table></figure><p>如果提示“node不是内部或外部命令，也不是可运行的程序”，说明电脑中没有node环境，可以去<a href="http://nodejs.cn/download/">node</a>官网下载，具体配置方法请自行百度。</p><h2 id="Git工具"><a href="#Git工具" class="headerlink" title="Git工具"></a>Git工具</h2><p><a href="https://www.git-scm.com/download/win">Git</a>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。在命令行输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">git --version<br></code></pre></td></tr></table></figure><p>弹出对应版本号，即说明git安装成功。</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>进行此步之前，需要保证node与npm工具可以正常使用，在命令行输入以下命令来检查工具情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">node -v<br>npm -v<br></code></pre></td></tr></table></figure><p>如果一切正常，即可安装hexo，在git bash中(在命令行也可以，不过还是推荐git bash)输入如下命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>OK，做到这一步，我们的环境准备就完成了，接下来我们开始真正地搭建自己的博客网站。</p><h1 id="搭建blog网站"><a href="#搭建blog网站" class="headerlink" title="搭建blog网站"></a>搭建blog网站</h1><h2 id="本地创建blog文件夹"><a href="#本地创建blog文件夹" class="headerlink" title="本地创建blog文件夹"></a>本地创建blog文件夹</h2><p>在电脑上找一个合适的文件夹，在此文件夹里右键选择<code>git bash here</code>，进入git界面。</p><p>在git中输入以下命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo init<br></code></pre></td></tr></table></figure><p>hexo会自己下载网站的代码，格式文件以及图片等资源到你选定的文件夹。</p><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><p>当资源下载完成之后，文件夹里其实就包含了一个最简的blog网站，只需在git bash中输入如下命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>等待一会儿，git bash会提示你的网站运行在localhost:4000上，此时在浏览器输入此网站就可以访问你的第一个blog网站！</p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>hexo初始blog模板其实并不是太美观，有许多雷锋已经为我们做好各式各样的漂亮的<a href="https://hexo.io/themes/">网站主题</a>，我们可以直接拿来用。<br>访问hexo主题网站，选择一个自己喜欢的主题，跳转至github下载release包，将其解压至blog文件夹下的theme子文件夹里，最后更改blog文件夹下的_config.yml文件，将theme项后的值改为你选择主题的名字，重新执行以下命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>再次访问localhost:4000，即可发现网站已经变成了你选择的主题。</p><h2 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h2><p>更新完主题后我们还要更改网站的部分内容，例如标题。这些配置在你下载的theme主题里的 _config.yml文件里可以找到。这是一个主题配置的<a href="https://hexo.fluid-dev.com/docs/guide/">示例</a>。</p><p>OK，下面让我们写一篇blog吧。使用markdown可以简单方便地写出一篇博客，你可以把它当作简化版的html页面，有许多markdown编辑器，例如Typora。</p><p>需要注意的是，在markdown文件的开头，需要注明你的文章信息，格式如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">搭建自己的博客网站</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022</span><span class="hljs-string">/1/15</span> <span class="hljs-number">15</span><span class="hljs-string">:41:25</span><br><span class="hljs-attr">tag:</span> [<span class="hljs-string">hexo</span>, <span class="hljs-string">博客</span>]<br><span class="hljs-attr">categories:</span> [<span class="hljs-string">开源工具</span>]<br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>好了，至此为止我们就完成了所有的本地工作，接下来让我们把blog部署到GitHub上。</p><h2 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h2><p>在github上创建并设置远程库，将仓库名命名为<code>你的GitHub昵称+github.io</code>,创建之后，点击setting找到GitHub Pages，选择Automatic page generator即可。你可以输入地址(<a href="https://github昵称+github.io)测试github/">https://GitHub昵称+github.io)测试github</a> pager是否创建成功。</p><h2 id="部署blog网站"><a href="#部署blog网站" class="headerlink" title="部署blog网站"></a>部署blog网站</h2><p>我们马上就完成了！<br>修改在blog文件夹下的_config.yml文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">deploy:<br>  type: git<br>  <span class="hljs-attr">repo</span>: https:<span class="hljs-comment">//github.com/你的GitHub昵称/你的GitHub昵称.github.io.git</span><br>  branch: master<br></code></pre></td></tr></table></figure><p>安装部署工具</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo-deployer-git -save<br></code></pre></td></tr></table></figure><p>初始化本地仓库：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>连接远程仓库：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git remote add origin https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/wapchief/</span>wapchief.github.io.git<br></code></pre></td></tr></table></figure><p>发布hexo到github page：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo d<br></code></pre></td></tr></table></figure><p>添加文件到本地仓库：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git <span class="hljs-keyword">add</span><br></code></pre></td></tr></table></figure><p>提交声明：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&#x27;内容&#x27;</span><br></code></pre></td></tr></table></figure><p>推送到远程仓库这里建议创建一个新的分支hexo，用于管理hexo文件。提交的的时候只提交hexo网站html、css、等源文件，而默认的master用来部署更新项目。<br>创建并切换到新建分支：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> hexo<br></code></pre></td></tr></table></figure><p>将分支推送到远程仓库：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> hexo<br></code></pre></td></tr></table></figure><p>这时打开网站就能看到效果了。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>之所以要搞自己的博客网站是希望督促自己不要懒惰，每天都要学一点儿新东西(立个flag)，这是我写的第一篇blog，虽说并没有什么技术含量，写的也不怎么清晰，但我在写的时候一些原本模棱两可的东西变得清晰起来，说明写一写还是有点儿好处的，之后我会每隔两三天更新一次文章，如果你愿意的话可以收藏此网站，让我们一起进步！</p>]]></content>
    
    
    <categories>
      
      <category>开源工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
